{"title":"Packages","markdown":{"headingText":"Packages","containsRefs":false,"markdown":"```{r}\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(gsignal)\n```\n\n```{r}\n# Tidying Dataset: labels.csv\nlabel_names <- read_csv(\"./src/data/labels.csv\")\ncolnames(label_names)[3] <- \"sub_label\"\n\nfor(i in 2:nrow(label_names)){\n  label_names$label[i] <- if_else(is.na(label_names$label[i]), \n                                  label_names$label[i-1], \n                                  label_names$label[i])\n}\nfor(i in 1:nrow(label_names)){\n  label_names$sub_label[i] <- if_else(is.na(label_names$sub_label[i]), \n                                      \"general\", label_names$sub_label[i])\n}\n\n# Tidying Dataset: screen_times\nscreen_times <- read_csv(\"./src/data/screening_times.csv\") %>% select(-OV,-HFR,-\"3D\", -begin)\n\n# Movie lengths from External Sources\nmovie_lengths <- data.frame(tribble(\n  ~Pattern, ~Movie, ~Minutes, ~Lag_min, ~Buffer_min, ~Fear_rating,\n  \"& Sebastian\", \"Belle and Sebastian\", 104,13.5,1.5,1.5,\n  \"Bolshoi\", \"Bolshoi: DornrÃ¶schen\", 138,37,0,0,\n  \"Buddy\", \"Buddy\", 94, 18.5,9,0,\n  \"Carrie\", \"Carrie\", 100,17.5,0,3.275,\n  \"Counselor\", \"The Counselor\", 117,10,2,3.4167,\n  \"Dinosaurier\", \"Dinosaurier - Im Reich der Giganten\", 87, 16.5,5,1,\n  \"Hobbit\", \"The Hobbit: The Desolation of Smaug\", 161, 41.5,5,1.5,\n  \"Christmas Star\", \"Journey to the Christmas Star\", 80,15.5,0,1,\n  \"Little Ghost\", \"The Little Ghost\", 92,12,0,1,\n  \"Machete\", \"Machete Kills\", 107,23,0,2.5,\n  \"Medicus\", \"The Physician\", 150,33,0,0,\n  \"Paranormal Activity\", \"Paranormal Activity: The Marked Ones\", 84,25,0,3.275,\n  \"Shakespeer\", \"Suck Me Shakespeer\", 119,25.5,10,0,\n  \"Hunger Games\", \"The Hunger Games: Catching Fire\", 146,5,5,2,\n  \"Starving Games\", \"The Starving Games\", 83,14,10,2,\n  \"Mitty\", \"The Secret Life of Walter Mitty\", 114,18.5,8,1,\n  \"Wolkig\", \"Cloudy with a Chance of Meatballs 2\", 96,NA,0,0.5,\n)) %>% arrange(Movie)\n\n\n# Standardizing Movie Names and Adding Movie Duration\nscreen_times <- screen_times %>% mutate(minutes = NA, lag_min = NA, buffer_min = NA, fear_rating = NA)\nfor(i in 1:length(movie_lengths$Movie)){\n  indices <- which(grepl(movie_lengths$Pattern[i], screen_times$movie))\n  for(j in indices){\n    screen_times$movie[j] <- movie_lengths$Movie[i]\n    screen_times$minutes[j] <- movie_lengths$Minutes[i]\n    screen_times$lag_min[j] <- movie_lengths$Lag_min[i]\n    screen_times$buffer_min[j] <- movie_lengths$Buffer_min[i]\n    screen_times$fear_rating[j] <- movie_lengths$Fear_rating[i]\n  }\n}\n\n# Tidying Dataset: ms_data\nms_data <- read_csv(\"./src/data/TOF_CO2_data_30sec.csv\")\n\n\n# Tidying Dataset: Movie Labels + EXPORT TO CSV\nextract_labels <- function(movie){\n  ori_labels <- read_csv(paste(\"./src/data/labels/\", movie, \".csv\", sep = \"\"), col_names = FALSE)\n  new_labels <- ori_labels %>% t() %>% data.frame()\n  colnames(new_labels) <- paste(label_names$label, label_names$sub_label, sep = \": \")\n  rownames(new_labels) <- seq(from=0, to=nrow(new_labels)*0.5-0.5, by=0.5)\n  return(new_labels)\n}\n\n# All except Hunger Games\nlabelled_movies <- c(\"Buddy\",\"Hobbit\",\"Machete\",\"Mitty\",\"Paranormal\",\"Hunger\")\n\nfor(i in labelled_movies[1:5]){\n  assign(i,extract_labels(i))\n}\n\n# Hunger Games\nHunger <- extract_labels(\"Tribute\") #Hunger Games\n```\n\n```{r}\n# Data Manipulation\nscheduled_to_Time <- function(scheduled){\n  scheduled <- sub(\"(..)-(..)-\", \"\\\\2/\\\\1/\", scheduled)\n}\n\n# Create a list for relevant movies (Scheduled start times)\nt_start_ind <- c()\nmovie_ind <- c()\nfor(i in 1:nrow(screen_times)){\n  \n  # To remove wrong entry\n  if(i==97){next}\n  \n  index_mstart <- which(grepl(scheduled_to_Time(screen_times$scheduled[i]), ms_data$Time))[1]\n  if(is.na(index_mstart)){next}\n  \n  # To remove movies lacking data entries (Assumes none <= 80min)\n  if(length(t_start_ind)>1 && index_mstart - t_start_ind[length(t_start_ind)] <= 160){\n    t_start_ind <- t_start_ind[1:length(t_start_ind)-1]\n    movie_ind <- movie_ind[1:length(movie_ind)-1]\n  }\n  \n  t_start_ind <- c(t_start_ind,index_mstart)\n  movie_ind <- c(movie_ind, if_else(is.na(index_mstart), NA, i))\n}\n\n#Create a list of relevant end timings\nt_end_ind <- c()\nfor(i in 1:length(t_start_ind)){\n  Ave_lag_t <- 2*screen_times$lag_min[movie_ind[i]]\n  Lag_buffer <- 2*screen_times$buffer_min[movie_ind[i]]\n  #Lag_buffer <- 9\n  Duration <- 2*screen_times$minutes[movie_ind[i]]\n  \n  end_index <- t_start_ind[i] + Duration + Ave_lag_t\n  min_end_index <- end_index - Lag_buffer\n  max_end_index <- end_index + Lag_buffer\n  \n  \n  narrowed_data <- ms_data %>% slice(min_end_index:max_end_index)\n  #peak <- narrowed_data %>% dplyr::filter(!is.na(CO2),CO2==max(CO2))\n  peak <- which.max(narrowed_data$CO2) + min_end_index -1\n  \n  if(length(peak)!=0){\n    if(length(peak)>1){\n      z <- Lag_buffer\n      for(j in peak){\n        if(abs(j-end_index) < z){\n          z <- abs(j-end_index)\n          interest <- j\n        }\n      }\n      end_index <- interest\n    }else{\n      end_index <- peak\n    }\n  }\n  t_end_ind <- c(t_end_ind, end_index)\n}\n\n# Snipped screen_times --> TO EXPORT CSV (Final_screen_times)\nFinal_screen_times <- data.frame(screen_times[movie_ind,])\nwrite.csv(Final_screen_times, \"./src/data/cleaned/snipped_screen_times.csv\", row.names=FALSE)\n\n# Adding movie labels to ms_data (NA = no movie)\nms_data <- ms_data %>% mutate(movie=NA, movie_F_ind=NA)\nfor(i in 1:length(t_start_ind)){\n  ms_data$movie[t_start_ind[i]:t_end_ind[i]] <- Final_screen_times$movie[i]\n  ms_data$movie_F_ind[t_start_ind[i]:t_end_ind[i]] <- i\n}\n\n\n# ms_data with scene labels\n# for actual start to end for 6 diff movies; NA = Unknown scene\nms_data <- ms_data %>% mutate(label=NA)\nlabelled_ms <- data.frame(ms_data[0,])\nis.one <- function(number){\n  if_else(number==1, TRUE, FALSE)\n}\n\nfor(name in labelled_movies){\n  label_set <- eval(as.name(name))\n  length <- nrow(eval(as.name(name)))\n  \n  to_label <- ms_data %>% dplyr::filter(grepl(name, movie)) %>% distinct(movie_F_ind)\n  typeof(to_label[[1]])\n  rel_screenings_ind <- to_label[[1]]\n  \n  t_end_ind[rel_screenings_ind]\n  t_end_ind[rel_screenings_ind]-length\n  for(j in 1:length){\n    act_start_ind <- t_end_ind[rel_screenings_ind]-length+1\n    labelled <- label_set[j,] %>% select_if(is.one)\n    if(length(labelled)==0){\n      ms_data$label[act_start_ind + j - 1] <- \"Others\"\n    } else{\n      ms_data$label[act_start_ind + j - 1] <- paste(colnames(labelled), collapse=\"; \")\n    }\n  }\n}\n\n# Snipped ms_data --> TO EXPORT CSV (valid_ms)\nvalid_ms <- data.frame(ms_data[0,])\nfor(i in 1:length(t_start_ind)){\n  est_act_start_ind <- t_end_ind[i]-2*screen_times$minutes[movie_ind[i]] + 1\n  valid_ms <- rbind(valid_ms, ms_data[est_act_start_ind:t_end_ind[i],])\n}\n\n# Discard column where all values are NA + Rename cmpds to exclude \"m\"\nvalid_ms <- valid_ms %>% \n  discard(function(x){all((is.na(x)|x<0) & is.numeric(x))}) %>%  \n  rename_if(grepl(\"^m\\\\d\", names(.)), ~ sub(\"m\",\"\",.))\n\n# Set factor for Time Column to scale with actual time\nvalid_ms$Time <- factor(valid_ms$Time,\n                        levels=unique(valid_ms$Time))\n\nvalid_ms <- valid_ms %>%\n  dplyr::filter(!is.na(label) | (is.na(label) & !grepl(paste(labelled_movies, collapse=\"|\"), movie))) %>%\n  group_by(movie_F_ind) %>% #To add a counter common to movie duplicates\n  mutate(counter = row_number(movie_F_ind))%>% #To compile all cmpds in 1 column\n  pivot_longer(\n    cols = matches(\"^\\\\d\"),\n    names_to = \"cmpd\",\n    values_to = \"conc\"\n  ) %>% #To correct for noise in baseline + Conc per pax\n  mutate(conc=if_else(conc<0|is.na(conc), 0,conc)) %>% ungroup() %>%\n  pivot_wider(\n    names_from = \"cmpd\",\n    values_from = c(\"conc\")\n  )\n\nwrite.csv(valid_ms, \"./src/data/cleaned/snipped_ms_data.csv\", row.names=FALSE)\n\nlabel_set <- valid_ms %>% separate_longer_delim(\n    cols = label,\n    delim = \"; \"\n  ) %>% dplyr::filter(!is.na(label)) %>% distinct(label)\n\nwrite.csv(label_set, \"./src/data/cleaned/snipped_label_set.csv\", row.names=FALSE)\n```\n\n```{r}\n# Personal Overview :)\n\n# Duplicate reading at screen_times index = 97 and 98\n# CO2 plot shows 227 visitors should be the correct entry (OR, 227+2)\nscreen_times \n\n# Differences in movie names for screen_times\ncount(screen_times, movie)\n\n# Some timings are skipped\nms_data[54695:54781,]\n\n# NA values present for some CO2\nms_data %>% dplyr::filter(is.na(CO2))\n\n# NA values analysed\n\ndata.frame(ms_data[264:862,]) %>% ggplot()+aes(y=CO2, x=Time)+geom_point()\ndata.frame(ms_data[3156:6023,]) %>% ggplot()+aes(y=CO2, x=Time)+geom_point()\ndata.frame(ms_data[17114:17472,]) %>% ggplot()+aes(y=CO2, x=Time)+geom_point()\ndata.frame(ms_data[46875:47234,]) %>% ggplot()+aes(y=CO2, x=Time)+geom_point()\n\n# Note: Not all peaks are certain/ with sharp peaks\n```\n\n\n#Back up Codes\n\n```{r eval=FALSE}\nextract_labels <- function(movie, new_name=movie){\n  ori_labels <- read_csv(paste(\"./src/data/labels/\", movie, \".csv\", sep = \"\"), col_names = FALSE)\n  new_labels <- ori_labels %>% t() %>% data.frame()\n  colnames(new_labels) <- paste(label_names$label, label_names$sub_label, sep = \": \")\n  rownames(new_labels) <- seq(from=0, to=nrow(new_labels)*0.5-0.5, by=0.5)\n  write.csv(new_labels, sprintf(\"./src/data/cleaned/%s_cleaned.csv\",new_name), row.names=FALSE)\n}\n```\n\n```{r eval=FALSE}\n# Attempt 5: Fixed start and end time (FINALISED)\nt_end_ind <- c()\nfor(i in 1:length(t_start_ind)){\n  Ave_lag_t <- 2*screen_times$lag_min[movie_ind[i]]\n  Lag_buffer <- 2*screen_times$buffer_min[movie_ind[i]]\n  #Lag_buffer <- 9\n  Duration <- 2*screen_times$minutes[movie_ind[i]]\n  \n  end_index <- t_start_ind[i] + Duration + Ave_lag_t\n  min_end_index <- end_index - Lag_buffer\n  max_end_index <- end_index + Lag_buffer\n  \n  \n  narrowed_data <- ms_data %>% slice(min_end_index:max_end_index)\n  #peak <- narrowed_data %>% dplyr::filter(!is.na(CO2),CO2==max(CO2))\n  peak <- which.max(narrowed_data$CO2) + min_end_index -1\n  \n  if(length(peak)!=0){\n    if(length(peak)>1){\n      z <- Lag_buffer\n      for(j in peak){\n        if(abs(j-end_index) < z){\n          z <- abs(j-end_index)\n          interest <- j\n        }\n      }\n      end_index <- interest\n    }else{\n      end_index <- peak\n    }\n  }\n  t_end_ind <- c(t_end_ind, end_index)\n  \n  graph<-data.frame(ms_data[t_start_ind[i]:(t_start_ind[i]+500),]) %>% ggplot()+aes(y=CO2, x=Time) + geom_point() + geom_point(data = data.frame(ms_data[t_end_ind[i],]), color = \"red\") + geom_point(data = data.frame(ms_data[t_end_ind[i]-2*screen_times$minutes[movie_ind[i]],]), color = \"red\") + labs(title=screen_times$movie[movie_ind[i]], subtitle = i) + geom_point(data = data.frame(ms_data[min_end_index,]), color = \"blue\") + geom_point(data = data.frame(ms_data[max_end_index,]), color = \"blue\") + geom_point(data = data.frame(ms_data[t_start_ind[i] + Duration + Ave_lag_t,]), color = \"blue\")\n  print(graph)\n}\n```\n\n```{r eval=FALSE}\n# Scene labelling\n# LONG RUN TIME\nto_label <- ms_data %>% dplyr::filter(grepl(\"Hobbit|Buddy|Mitty|Machete|Hunger|Paranormal\", movie)) %>% distinct(movie_F_ind)\n\nms_data <- ms_data %>% mutate(label=NA)\nlabelled_ms <- data.frame(ms_data[0,])\nis.one <- function(number){\n  if_else(number==1, TRUE, FALSE)\n}\n\nfor(name in labelled_movies){\n  label_set <- eval(as.name(name))\n  length <- nrow(eval(as.name(name)))\n  for(i in to_label$movie_F_ind){\n    act_start_ind <- t_end_ind[i]-length + 1\n    for(j in 1:length){\n      labelled <- label_set[j,] %>% select_if(is.one)\n      if(length(labelled)==0){\n        ms_data$label[act_start_ind + j - 1] <- \"Others\"\n      } else{\n        ms_data$label[act_start_ind + j - 1] <- paste(colnames(labelled), collapse=\"; \")\n      }\n    }\n    labelled_ms_temp <- ms_data[act_start_ind:t_end_ind[i],]\n    labelled_ms <- rbind(labelled_ms, labelled_ms_temp)\n  }\n}\n```\n\n#Unused/ Old Versions of Code\n\n```{r eval = FALSE}\nvalid_ms <- valid_ms %>%\n  dplyr::filter(!is.na(label) | (is.na(label) & !grepl(paste(labelled_movies, collapse=\"|\"), movie))) %>%\n  group_by(movie_F_ind) %>% #To add a counter common to movie duplicates\n  mutate(counter = row_number(movie_F_ind)) %>% #To compile all cmpds in 1 column\n  pivot_longer(\n    cols = matches(\"^\\\\d\"),\n    names_to = \"cmpd\",\n    values_to = \"conc\"\n  ) %>% #To correct for noise in baseline + Conc per pax\n  mutate(conc=if_else(conc<0|is.na(conc), 0,conc),\n         conc_perpax = conc/Final_screen_times$number.visitors[movie_F_ind]) %>%\n  ungroup()\n```\n\n```{r eval=FALSE}\n# NOT USED\n# Attempt 3: GREAT & FINAL, except for parts i=37, i=96, \nAve_credits_t <- 20*2 #Originally 15*2\nAve_ad_t <- 45*2 #30*2\n\nt_end_ind <- c()\nfor(i in 1:length(t_start_ind)){\n  start_index <- t_start_ind[i]\n  latest_end_index <- if_else((t_start_ind[i] + 2*screen_times$minutes[movie_ind[i]] + Ave_ad_t + Ave_credits_t) >= t_start_ind[i+1] && !is.na(t_start_ind[i+1]), t_start_ind[i+1], t_start_ind[i] + 2*screen_times$minutes[movie_ind[i]] + Ave_ad_t)\n  earliest_end_index <- if_else(latest_end_index==t_start_ind[i+1]&& !is.na(t_start_ind[i+1]),t_start_ind[i+1]-Ave_credits_t-Ave_ad_t,t_start_ind[i] + 2*screen_times$minutes[movie_ind[i]] - Ave_credits_t - Ave_ad_t)\n  \n  #NA VALUES\n  if(!anyNA(ms_data$CO2[earliest_end_index:latest_end_index])){\n    to_analyse <- ms_data %>% slice(seq(from=earliest_end_index, to=latest_end_index, by=1))\n    \n    peak <- data.frame(gsignal::findpeaks(to_analyse$CO2))\n    narrowed_peak <- peak %>% dplyr::filter((height - ms_data$CO2[(loc+earliest_end_index+6)] > 30) & (height >= ms_data$CO2[loc+earliest_end_index-1])) #[10,17,8][10,34,1] #Modify height <..., currently never-ending loop\n    count <- 0\n    while(length(narrowed_peak$pks)==0){\n      ## FIND A SOLUTION\n      narrowed_peak <- peak %>% dplyr::filter((height - ms_data$CO2[(loc+earliest_end_index+6)]) > (30 - count) & height >= ms_data$CO2[loc+earliest_end_index-1])\n      count <- count + 1\n    }\n    if(length(narrowed_peak)>1){\n      narrowed_peak <- narrowed_peak %>% dplyr::filter(loc == min(loc))\n    }\n    chosen_peak <- narrowed_peak %>% dplyr::filter(height == max(height))\n    index_mend <- chosen_peak$loc + earliest_end_index\n    t_end_ind <- c(t_end_ind, index_mend)#Last movie may be ~5min off\n    \n    graph<-data.frame(ms_data[t_start_ind[i]:if_else(i==length(t_start_ind), t_start_ind[i]+500,t_start_ind[i+1]),]) %>% ggplot()+aes(y=CO2, x=Time) + geom_point() + geom_point(data = data.frame(ms_data[t_end_ind[i],]), color = \"red\") + geom_point(data = data.frame(ms_data[t_end_ind[i]-2*screen_times$minutes[movie_ind[i]],]), color = \"red\") + geom_point(data = data.frame(ms_data[earliest_end_index,]), color = \"blue\") + geom_point(data = data.frame(ms_data[latest_end_index,]), color = \"blue\") + labs(title=i)\n    print(graph)\n  } else {\n    t_end_ind <- c(t_end_ind, NA)\n  }\n}\n```\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"data_cleaning.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","editor":"visual","theme":"minty"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}