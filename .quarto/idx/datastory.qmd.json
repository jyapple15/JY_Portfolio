{"title":"Is the smell of fear real?","markdown":{"yaml":{"title":"Is the smell of fear real?","filters":["shinylive"]},"headingText":"Colour scheme (23 colours needed for palette)","containsRefs":false,"markdown":"\n\n```{shinylive-r}\n#| standalone: true\n\nlibrary(shiny)\nlibrary(shinyglide)\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(shinythemes)\nlibrary(shinycssloaders)\nlibrary(rlist)\n\ncolour_palette <- c(\"#a9a9f9\",\"#009699\",\"maroon\",\"red\",\"orange\",\"yellow\",\"palegreen\",\"green\",\"lightblue\",\"blue\",\"purple\",\"pink\",\"green\",\"lightblue\",\"blue\",\"purple\",\"pink\",\"pink\",\"green\",\"lightblue\",\"blue\",\"purple\",\"pink\")\ncolour_gradient <- c(\"#009699\",\"royalblue\",\"#a9a9f9\") #Low to high conc\ncolour_bkg <- c(\"#a9a9f9\",\"#009699\") #contrasting w each other and w palette\n\n# Spinner Options\noptions(spinner.color=\"#0275D8\", spinner.color.background=\"#ffffff\", spinner.size=2)\n\n# Importing Cleaned Datasets\nlabelled_movies <- c(\"Buddy\",\"Hobbit\",\"Machete\",\"Mitty\",\"Paranormal\",\"Hunger\")\n\n# Importing Snipped Datasets\nfor(i in c(\"ms_data\",\"screen_times\")){\n  assign(i,read_csv(sprintf(\"./src/data/cleaned/snipped_%s.csv\",i)))\n}\n\nms_data <- ms_data %>%\n  pivot_longer(\n    cols = matches(\"^\\\\d\"),\n    names_to = \"cmpd\",\n    values_to = \"conc\"\n  ) %>% \n  mutate(conc_perpax = conc/screen_times$number.visitors[movie_F_ind])\n\n\n# Labelled ms_data (Only 6 diff movies)\nlabelled_ms <- ms_data %>% \n  dplyr::filter(!is.na(label))\n  \n\nexp_labelled_ms <- labelled_ms %>% #To separate labels\n  separate_longer_delim(\n    cols = label,\n    delim = \"; \"\n  )\n\nfear_labels <- grep(\"death|suspense|horror|murder|aggressive|violence|shock\", \n                    distinct(exp_labelled_ms,label)$label, \n                    value=TRUE)\n\n# Unlabelled ms_data (Excluding the buffer time before labelled movies start)\nunlabelled_ms <- ms_data %>% \n  dplyr::filter(is.na(label))\n\n# Any pics etc. need to be in www folder\nui <- fluidPage(\n  shinythemes::themeSelector(),\n  tags$link(rel = \"stylesheet\", href = \"styles.css\"), #In www folder\n  titlePanel(\"Is the smell of fear real?\"),\n  \n  glide(\n    id = \"description\",\n    controls_position = \"bottom\",\n    previous_label = \"Huh?\",\n    next_label = \"What now?\",\n    \n    #Screen 1\n    screen(\n      div(\n        p(\"This is the 1st chunk of words that I shall potentially write, look forward to it \\n\\n\\n\\n\\n heyhey\"),\n      ),\n      sidebarLayout(\n        mainPanel(\n          withSpinner( #https://www.rdocumentation.org/packages/shinycssloaders/versions/1.0.0/topics/withSpinner\n            ui_element = plotOutput(\"graph_1\"),\n            image = \"loading_ghost.gif\",\n            image.width = \"400px\"\n          )\n        ),\n        sidebarPanel(\n          sliderInput(inputId = \"graph_1_rank\",\n                      label = \"Expected Fear Rank\",\n                      value = c(1,25),\n                      min = 1,\n                      max = length(distinct(ms_data,cmpd)$cmpd),\n                      step = 1,\n                      ticks = FALSE),\n        )\n      )\n    ),\n    \n    #Screen 2\n    screen(\n      div(\n        p(\"This is the 2nd chunk of words that I shall potentially write, look forward to it \\n\\n\\n\\n\\n heyhey\"),\n      ),\n      sidebarLayout(\n        mainPanel(\n          withSpinner( #https://www.rdocumentation.org/packages/shinycssloaders/versions/1.0.0/topics/withSpinner\n            ui_element = plotOutput(\"graph_2\"),\n            image = \"loading_ghost.gif\",\n            image.width = \"400px\"\n          )\n        ),\n        sidebarPanel(\n          uiOutput(\"select_screen_2\"),\n          \n          checkboxInput(inputId = \"graph_2_checkbox\",\n                        label = \"Exclude zeros\",\n                        value = FALSE),\n        )\n      )\n    ),\n    \n    #Screen 3\n    screen(\n      div(\n        p(\"This is the 3rd chunk of words that I shall potentially write, look forward to it \\n\\n\\n\\n\\n heyhey\"),\n      ),\n      sidebarLayout(\n        mainPanel(\n          withSpinner( #https://www.rdocumentation.org/packages/shinycssloaders/versions/1.0.0/topics/withSpinner\n            ui_element = uiOutput(\"graph_3\"),\n            image = \"loading_ghost.gif\",\n            image.width = \"400px\"\n          )\n        ),\n        sidebarPanel(\n          radioButtons(\n            inputId = \"graph_3_movie\",\n            label = \"Select a movie:\",\n            choices = distinct(labelled_ms,movie)$movie\n          ),\n          sliderInput(inputId = \"graph_3_rank\",\n                      label = \"Expected Fear Rank\",\n                      value = c(1,25),\n                      min = 1,\n                      max = length(distinct(ms_data,cmpd)$cmpd),\n                      step = 1,\n                      ticks = FALSE)\n        )\n      )\n    ),\n    \n    #Screen 4\n    screen(\n      div(\n        p(\"This is the 4th chunk of words that I shall potentially write, look forward to it \\n\\n\\n\\n\\n heyhey\"),\n      ),\n      sidebarLayout(\n        mainPanel(\n          withSpinner( #https://www.rdocumentation.org/packages/shinycssloaders/versions/1.0.0/topics/withSpinner\n            ui_element = plotOutput(\"graph_4\"),\n            image = \"loading_ghost.gif\",\n            image.width = \"400px\"\n          ),\n          uiOutput(\"checkbox_screen_4\") #TODO\n        ),\n        sidebarPanel(\n          radioButtons(\n            inputId = \"graph_4_movie\",\n            label = \"Select a movie:\",\n            choices = distinct(labelled_ms,movie)$movie\n          ),\n          uiOutput(\"select_screen_4\")\n        )\n      )\n    ),\n    \n    #Screen 5\n    screen(\n      div(\n        p(\"This is the 5th chunk of words that I shall potentially write, look forward to it \\n\\n\\n\\n\\n heyhey\"),\n      ),\n      sidebarLayout(\n        mainPanel(\n          withSpinner( #https://www.rdocumentation.org/packages/shinycssloaders/versions/1.0.0/topics/withSpinner\n            ui_element = plotOutput(\"graph_5a\"),\n            image = \"loading_ghost.gif\",\n            image.width = \"400px\"\n          ),\n          withSpinner( #https://www.rdocumentation.org/packages/shinycssloaders/versions/1.0.0/topics/withSpinner\n            ui_element = plotOutput(\"graph_5b\"),\n            image = \"loading_ghost.gif\",\n            image.width = \"400px\"\n          )\n        ),\n        sidebarPanel(\n          uiOutput(\"select_screen_5\"),\n          \n          checkboxInput(inputId = \"graph_5_checkbox\",\n                        label = \"Exclude zeros\",\n                        value = FALSE),\n        )\n      )\n    )\n  ),\n  wellPanel(\n    selectInput(inputId = \"whats_fear\", \n                label = \"\\\"Fear\\\" labels\", \n                choices = distinct(exp_labelled_ms,label)$label, \n                multiple = TRUE, \n                selected = fear_labels,),\n  )\n)\n\n#Tabset panel for tabs (Example 6) runExample(\"06_tabsets\")\n\nserver <- function(input, output){\n  #https://mastering-shiny.org/action-graphics.html\n  \n  tidied_labelled_ms <- reactive(exp_labelled_ms %>%\n                                   mutate(is.fear = if_else(grepl(paste(fear_labels, collapse=\"|\"),label), \"Fear\",\"Others\")))\n\n  #Screen 1\n  graph_1 <- reactive(tidied_labelled_ms() %>% \n    group_by(cmpd) %>%\n    mutate(Tconc = sum(conc)) %>%\n    group_by(cmpd,is.fear) %>%\n    mutate(fraction = sum(conc)/Tconc) %>%\n    distinct(cmpd,is.fear,fraction) %>%\n    arrange(is.fear, desc(fraction)))\n  \n  # For use in interactive UI and others\n  fear_cmpd_ranked <- reactive(graph_1()$cmpd[1:(length(graph_1()$cmpd)/2)])\n  \n  # Interactive UI (Screen 2)\n  output$select_screen_2 <- renderUI({\n    selectInput(inputId = \"graph_2_cmpd\",\n                label = \"Choose a compound:\\n(Arranged by expected fear rank)\",\n                choices = fear_cmpd_ranked())\n  })\n  \n  # Interactive UI (Screen 4)\n  output$select_screen_4 <- renderUI({\n    selectInput(inputId = \"graph_4_cmpd\",\n                label = \"Choose a compound:\\n(Arranged by expected fear rank)\",\n                choices = fear_cmpd_ranked())\n  })\n  \n  # Interactive UI (Screen 5)\n  output$select_screen_5 <- renderUI({\n    selectInput(inputId = \"graph_5_cmpd\",\n                label = \"Choose a compound:\\n(Arranged by expected fear rank)\",\n                choices = fear_cmpd_ranked())\n  })\n  \n  #For later stuff\n  fear_cmpd_ranked <- reactive(graph_1()$cmpd[1:(length(graph_1()$cmpd)/2)])\n  \n  #For user input in shiny \n  user_start_rank_1 <- reactive(input$graph_1_rank[1])\n  user_end_rank_1 <- reactive(input$graph_1_rank[2])\n  \n  select_to_plot_1 <- reactive(graph_1()[c(user_start_rank_1():user_end_rank_1(), (length(graph_1()$cmpd)-user_start_rank_1()+1):(length(graph_1()$cmpd)-user_end_rank_1()+1)),])\n  \n  output$graph_1 <- renderPlot({\n    select_to_plot_1() %>%\n      group_by(is.fear) %>%\n      mutate(cmpd = fct_reorder(as.character(cmpd), fraction)) %>%\n      ggplot(aes(y = cmpd, x = fraction, fill = fct_reorder(is.fear, -fraction))) +\n      geom_col() + \n      labs(title = paste(\"Top\",user_start_rank_1(),\"to\",user_end_rank_1(),\"Most Frequently Emitted Compounds when in Fear\"),\n           subtitle = \"Identified by distribution across different types of scenes\",\n           y = \"m/z of Compound\", \n           x = \"Fraction of the Total Concentration\", \n           fill = \"Type of Scene\") + \n      scale_fill_manual(values=colour_palette) +\n      theme(panel.background = element_blank(),\n            axis.ticks.y = element_blank(),\n            axis.title.y = element_text(margin = margin(r = 10)),\n            axis.title.x = element_text(margin = margin(t = 10)),\n            plot.subtitle = element_text(margin = margin(b = 10))\n      ) + \n      scale_x_continuous(expand = c(0, 0))\n  })\n  \n  #Screen 2\n  #For user input in shiny\n  user_cmpd_2 <- reactive(input$graph_2_cmpd)\n  zeros <- reactive(input$graph_2_checkbox) #FALSE means do not exclude zeros\n  \n  graph_2 <- reactive(tidied_labelled_ms() %>% \n                        dplyr::filter(cmpd == user_cmpd_2()))\n  graph_2t <- reactive(graph_2())\n  \n  output$graph_2 <- renderPlot({\n    if(zeros() == TRUE){\n      graph_2t <- reactive(graph_2() %>% dplyr::filter(conc > 0))\n    } \n    graph_2t() %>% \n      ggplot(aes(x=conc_perpax, y=label)) + \n      geom_hex() +\n      labs(title = paste(\"Distribution of compound with m/z =\",user_cmpd_2(),\"across different scenes\"),\n           subtitle = paste(if_else(zeros() == FALSE, \"Excludes\", \"Includes\"), \"data points where compound is absent\"),\n           y = \"Type of Scene\", \n           x = \"Concentration per Pax per Scene\") + \n      scale_fill_gradientn(colours = colour_gradient)\n    })\n  \n  #Screen 3\n  #For user input in Shiny\n  user_movie_3 <- reactive(input$graph_3_movie)\n  user_top_cmpd_3 <- reactive(input$graph_3_rank[1]) #A range selected by user\n  user_bottom_cmpd_3 <- reactive(input$graph_3_rank[2])\n  user_count_cmpd_3 <- reactive(user_bottom_cmpd_3() - user_top_cmpd_3() + 1)\n  \n  #Vector of selected compounds\n  selected_cmpd_3 <- reactive(fear_cmpd_ranked()[user_top_cmpd_3():user_bottom_cmpd_3()])\n  \n  graph_3t <- reactive(labelled_ms %>% \n                         dplyr::filter(movie == user_movie_3()) %>%\n                         mutate(is.fear = if_else(grepl(paste(fear_labels, collapse=\"|\"),label), \"Fear\",\"Others\")) %>%\n                         dplyr::filter(cmpd %in% selected_cmpd_3()) %>% #Select top cmpd\n                         group_by(counter,cmpd) %>% #To add an ave conc common to similar movies\n                         mutate(average = mean(conc_perpax)) %>% \n                         group_by(cmpd) %>% \n                         mutate(sum = sum(conc)) %>% ungroup())\n\n  # Vector of absent cmpd (Complete Absence)\n  removed_cmpd <- reactive(dplyr::filter(distinct(graph_3t(), cmpd, sum), sum == 0)$cmpd)\n\n  graph_3 <- reactive(graph_3t() %>% \n                        dplyr::filter(sum != 0) %>% \n                        distinct(counter,cmpd, .keep_all = TRUE) %>% #To remove movie duplicates\n                        transform(cmpd=factor(cmpd, levels=selected_cmpd_3())) %>%\n                        arrange(cmpd, desc(is.fear)))\n  \n  # Plot\n  output$graph_3_no <- renderText({\"All compounds selected were absent throughout the movie selected.\"})\n  \n  output$graph_3_yes <- renderPlot({\n    graph_3() %>% #NOTE: IF PLOT CONC, A FEW COMPLETE ABSENCE\n      ggplot(aes(x=counter/2, y=average, colour=fct_inorder(is.fear))) + \n      geom_point(alpha=0.5)+ \n      facet_wrap(~ cmpd, \n                 ncol = ceiling(sqrt(user_count_cmpd_3()-length(removed_cmpd()))), \n                 scales=\"free\", \n                 labeller = as_labeller(~ paste0(\"No. \", user_top_cmpd_3() + which(selected_cmpd_3() %in% .x) - 1,\":\\n\", .x))) + \n      guides(color = guide_legend(reverse = TRUE)) +\n      labs(title = paste(\"Distribution of Top\", \n                         user_top_cmpd_3(), \n                         \"to\", \n                         user_bottom_cmpd_3(), \n                         \"Fear Compounds in\", \n                         user_movie_3()),\n           subtitle = \"Concentrations are averaged\",\n           y = \"Concentration per Scene\", \n           x = \"Duration of Movie\",\n           caption = str_wrap(paste(if_else(length(removed_cmpd())>1, \"Plots\", \"Plot\"),\n                                    \"for\",\n                                    if_else(length(removed_cmpd())>1, \"compounds\", \"compound\"),\n                                    \"with m/z =\",\n                                    paste(removed_cmpd(), collapse=\", \"), \n                                    if_else(length(removed_cmpd())>1, \"have\", \"has\"),\n                                    \"been removed due to absence throughout movie.\"), 150),\n           color = \"Type of Scene\") + \n      theme(axis.text.y = element_text(size=5),\n            axis.text.x = element_text(size=5),\n            strip.text = element_text(size=6, margin=margin(t=1,b=2)),\n            strip.background.x = element_rect(fill=colour_palette),\n            panel.spacing = unit(1, \"lines\"),\n            panel.background = element_blank(),\n            panel.border = element_rect(fill = NA, linewidth = 0.1, color = \"grey\"),\n            plot.caption = element_text(hjust=0)) +\n      scale_color_manual(values = colour_palette)\n  })\n  \n  output$graph_3 <- renderUI({\n    switch(if_else(length(graph_3()$cmpd) != 0, 1, 2),\n           withSpinner(\n             ui_element = plotOutput(\"graph_3_yes\"),\n             image = \"loading_ghost.gif\",\n             image.width = \"400px\"),\n           verbatimTextOutput(\"graph_3_no\"))\n  }) #SWITCH() https://stackoverflow.com/questions/70348671/how-to-display-outputs-based-on-radio-button-in-r-shiny\n  \n  # Screen 4\n  #For user input in Shiny\n  user_movie_4 <- reactive(input$graph_4_movie)\n  user_cmpd_4 <- reactive(input$graph_4_cmpd)\n  \n  # Interactive UI (Screen 4) TODO Select all: https://stackoverflow.com/questions/28829682/r-shiny-checkboxgroupinput-select-all-checkboxes-by-click\n  # NOTE: Mistake -> needa filter user_movie_4() --> BUT, when did that, error --> should try reactive({}) or filter through screen_times next\n  user_movie_4_indices <- reactive(labelled_ms %>% \n      dplyr::filter(movie == user_movie_4()) %>%\n      distinct(movie_F_ind) %>% '[['(\"movie_F_ind\"))\n  \n  ui_4_screens <- reactive({\n    list <- tagList()\n    for(i in user_movie_4_indices()){\n      list <- list.append(list, div(\n        p(paste(\"Screening:\",i)),\n        p(paste(\"Scheduled for\",screen_times$scheduled[i])),\n        p(paste(\"Occupied by\",screen_times$number.visitors[i], \"people\")),\n        p(paste(screen_times$filled..[i],\"% filled\", sep=\"\"))\n      ))\n    }\n    return(list)\n  })\n  \n  output$checkbox_screen_4 <- renderUI({ \n    checkboxGroupInput(inputId = \"graph_4_details\",\n                       label = \"Select desired screenings:\",\n                       selected = user_movie_4_indices(),\n                       choiceNames = ui_4_screens(),\n                       choiceValues = user_movie_4_indices(),\n                       inline = TRUE)  \n  })\n  \n  graph_4 <- reactive(tidied_labelled_ms() %>% arrange(is.fear) %>%\n                        distinct(Time, cmpd, .keep_all = TRUE) %>% #To remove expanded labels\n                        arrange(counter, cmpd) %>% \n                        dplyr::filter(cmpd == user_cmpd_4()) %>% #Select top cmpd\n                        dplyr::filter(movie == user_movie_4()) %>% #Select 1 movie\n                        mutate(movie_F_ind = fct_reorder2(as.character(movie_F_ind), counter, conc_perpax)) %>% \n                        arrange(movie_F_ind) %>% \n                        dplyr::filter(movie_F_ind %in% input$graph_4_details)) #JY: To filter screenings (All else run well)\n  \n  Others_4 <- reactive(graph_4() %>% mutate(conc_perpax=(max(conc_perpax)+min(conc_perpax))/2) %>% dplyr::filter(is.fear == \"Others\", movie_F_ind==graph_4()$movie_F_ind[1]))\n  Fear_4 <- reactive(graph_4() %>% mutate(conc_perpax=(max(conc_perpax)+min(conc_perpax))/2) %>% dplyr::filter(is.fear == \"Fear\", movie_F_ind==graph_4()$movie_F_ind[1]))\n  \n  output$graph_4 <- renderPlot({\n    graph_4() %>%\n      ggplot(aes(x=counter/2, y=conc_perpax)) + \n      geom_tile(data = Fear_4(),\n                height=max(graph_4()$conc_perpax)-min(graph_4()$conc_perpax),\n                aes(fill=\"Fear\"),linetype=0,alpha=0.3) +\n      geom_tile(data = Others_4(), \n                height=max(graph_4()$conc_perpax)-min(graph_4()$conc_perpax), \n                aes(fill=\"Others\"),linetype=0,alpha=0.1) +\n      geom_line(aes(group = movie_F_ind, color = movie_F_ind)) +\n      labs(title = paste(\"Distribution of compound with m/z =\", \n                         user_cmpd_4(), \n                         \"across duration of\", \n                         user_movie_4()),\n           subtitle = \"Each screening is represented by a line graph.\",\n           y = \"Concentration per Scene\", \n           x = \"Duration of Movie (min)\",\n           color = \"Screening\",\n           fill = \"Type of Scene\") + \n      theme(panel.background = element_blank()) + \n      scale_fill_manual(values = colour_bkg) +\n      scale_color_manual(values = colour_palette) +\n      scale_x_continuous(expand = c(0, 0)) + \n      scale_y_continuous(expand = c(0, 0))\n  })\n  \n  # Print Screening Details (By clicking on label) (TODO)\n  #graph_4 %>% distinct(movie_F_ind) %>% arrange(movie_F_ind)\n  # movie A \n  #graph_4 %>% distinct(movie_F_ind) %>% arrange(movie_F_ind) # %>% ...\n  # No. of people, Time of day, Date (Maybe got spoilers so less scared haha)\n  \n  # Screen 5\n  user_cmpd_5 <- reactive(input$graph_5_cmpd) #SELECT from really narrowed few (TODO)\n  \n  graph_5_fixed <- ms_data %>%\n    group_by(cmpd,movie) %>%\n    mutate(overall_ave_conc_perpax = mean(conc_perpax)) %>% ungroup()\n  \n  graph_5 <- reactive(\n    graph_5_fixed %>%\n      dplyr::filter(cmpd == user_cmpd_5())\n    )\n  \n  graph_5a <- reactive(graph_5())\n  \n  output$graph_5a <- renderPlot({\n    if(input$graph_5_checkbox){\n      graph_5a <- reactive(graph_5() %>%\n        dplyr::filter(conc_perpax>0))\n    }\n    \n    graph_5a() %>% \n      ggplot(aes(x = conc_perpax, y = movie)) +\n      geom_boxplot() +\n      labs(x = \"Concentration per Pax per Scene\", \n           y = \"Movie\",\n           title = paste(\"Distribution of compound with m/z =\", user_cmpd_5()))\n  })\n  \n  output$graph_5b <- renderPlot({\n    graph_5()  %>%\n      distinct(movie, overall_ave_conc_perpax, .keep_all = TRUE) %>% \n      mutate(fear_rating = screen_times$fear_rating[movie_F_ind]) %>%\n      ggplot(aes(x = fear_rating, y = overall_ave_conc_perpax)) +\n      geom_point() + geom_line() + \n      labs(x = \"Online Fear Ratings\",\n           y = \"Average Concentration per Pax per Scene\",\n           title = \"Comparison of Actual and Expected Fear Ratings\", \n           subtitle = paste(\"Based on compound with m/z =\",user_cmpd_5()), \n           #caption = \"Fear ratings are an average of rating obtained from Reel Scary and Common Sense Media\",\n           caption=a(\"ggplot2 Package\", href = \"https://ggplot2.tidyverse.org/\"))\n  })\n    \n}\n\nshinyApp(ui = ui, server = server)\n```\n<p>Placeholder for Write-up</p>\n<iframe height=\"150%\" width=\"100%\" frameborder=\"no\" src=\"https://andrea-jy.shinyapps.io/datastory_rough/\"></iframe>\nPlaceholder for Visualisations^","srcMarkdownNoYaml":"\n\n```{shinylive-r}\n#| standalone: true\n\nlibrary(shiny)\nlibrary(shinyglide)\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(shinythemes)\nlibrary(shinycssloaders)\nlibrary(rlist)\n\n# Colour scheme (23 colours needed for palette)\ncolour_palette <- c(\"#a9a9f9\",\"#009699\",\"maroon\",\"red\",\"orange\",\"yellow\",\"palegreen\",\"green\",\"lightblue\",\"blue\",\"purple\",\"pink\",\"green\",\"lightblue\",\"blue\",\"purple\",\"pink\",\"pink\",\"green\",\"lightblue\",\"blue\",\"purple\",\"pink\")\ncolour_gradient <- c(\"#009699\",\"royalblue\",\"#a9a9f9\") #Low to high conc\ncolour_bkg <- c(\"#a9a9f9\",\"#009699\") #contrasting w each other and w palette\n\n# Spinner Options\noptions(spinner.color=\"#0275D8\", spinner.color.background=\"#ffffff\", spinner.size=2)\n\n# Importing Cleaned Datasets\nlabelled_movies <- c(\"Buddy\",\"Hobbit\",\"Machete\",\"Mitty\",\"Paranormal\",\"Hunger\")\n\n# Importing Snipped Datasets\nfor(i in c(\"ms_data\",\"screen_times\")){\n  assign(i,read_csv(sprintf(\"./src/data/cleaned/snipped_%s.csv\",i)))\n}\n\nms_data <- ms_data %>%\n  pivot_longer(\n    cols = matches(\"^\\\\d\"),\n    names_to = \"cmpd\",\n    values_to = \"conc\"\n  ) %>% \n  mutate(conc_perpax = conc/screen_times$number.visitors[movie_F_ind])\n\n\n# Labelled ms_data (Only 6 diff movies)\nlabelled_ms <- ms_data %>% \n  dplyr::filter(!is.na(label))\n  \n\nexp_labelled_ms <- labelled_ms %>% #To separate labels\n  separate_longer_delim(\n    cols = label,\n    delim = \"; \"\n  )\n\nfear_labels <- grep(\"death|suspense|horror|murder|aggressive|violence|shock\", \n                    distinct(exp_labelled_ms,label)$label, \n                    value=TRUE)\n\n# Unlabelled ms_data (Excluding the buffer time before labelled movies start)\nunlabelled_ms <- ms_data %>% \n  dplyr::filter(is.na(label))\n\n# Any pics etc. need to be in www folder\nui <- fluidPage(\n  shinythemes::themeSelector(),\n  tags$link(rel = \"stylesheet\", href = \"styles.css\"), #In www folder\n  titlePanel(\"Is the smell of fear real?\"),\n  \n  glide(\n    id = \"description\",\n    controls_position = \"bottom\",\n    previous_label = \"Huh?\",\n    next_label = \"What now?\",\n    \n    #Screen 1\n    screen(\n      div(\n        p(\"This is the 1st chunk of words that I shall potentially write, look forward to it \\n\\n\\n\\n\\n heyhey\"),\n      ),\n      sidebarLayout(\n        mainPanel(\n          withSpinner( #https://www.rdocumentation.org/packages/shinycssloaders/versions/1.0.0/topics/withSpinner\n            ui_element = plotOutput(\"graph_1\"),\n            image = \"loading_ghost.gif\",\n            image.width = \"400px\"\n          )\n        ),\n        sidebarPanel(\n          sliderInput(inputId = \"graph_1_rank\",\n                      label = \"Expected Fear Rank\",\n                      value = c(1,25),\n                      min = 1,\n                      max = length(distinct(ms_data,cmpd)$cmpd),\n                      step = 1,\n                      ticks = FALSE),\n        )\n      )\n    ),\n    \n    #Screen 2\n    screen(\n      div(\n        p(\"This is the 2nd chunk of words that I shall potentially write, look forward to it \\n\\n\\n\\n\\n heyhey\"),\n      ),\n      sidebarLayout(\n        mainPanel(\n          withSpinner( #https://www.rdocumentation.org/packages/shinycssloaders/versions/1.0.0/topics/withSpinner\n            ui_element = plotOutput(\"graph_2\"),\n            image = \"loading_ghost.gif\",\n            image.width = \"400px\"\n          )\n        ),\n        sidebarPanel(\n          uiOutput(\"select_screen_2\"),\n          \n          checkboxInput(inputId = \"graph_2_checkbox\",\n                        label = \"Exclude zeros\",\n                        value = FALSE),\n        )\n      )\n    ),\n    \n    #Screen 3\n    screen(\n      div(\n        p(\"This is the 3rd chunk of words that I shall potentially write, look forward to it \\n\\n\\n\\n\\n heyhey\"),\n      ),\n      sidebarLayout(\n        mainPanel(\n          withSpinner( #https://www.rdocumentation.org/packages/shinycssloaders/versions/1.0.0/topics/withSpinner\n            ui_element = uiOutput(\"graph_3\"),\n            image = \"loading_ghost.gif\",\n            image.width = \"400px\"\n          )\n        ),\n        sidebarPanel(\n          radioButtons(\n            inputId = \"graph_3_movie\",\n            label = \"Select a movie:\",\n            choices = distinct(labelled_ms,movie)$movie\n          ),\n          sliderInput(inputId = \"graph_3_rank\",\n                      label = \"Expected Fear Rank\",\n                      value = c(1,25),\n                      min = 1,\n                      max = length(distinct(ms_data,cmpd)$cmpd),\n                      step = 1,\n                      ticks = FALSE)\n        )\n      )\n    ),\n    \n    #Screen 4\n    screen(\n      div(\n        p(\"This is the 4th chunk of words that I shall potentially write, look forward to it \\n\\n\\n\\n\\n heyhey\"),\n      ),\n      sidebarLayout(\n        mainPanel(\n          withSpinner( #https://www.rdocumentation.org/packages/shinycssloaders/versions/1.0.0/topics/withSpinner\n            ui_element = plotOutput(\"graph_4\"),\n            image = \"loading_ghost.gif\",\n            image.width = \"400px\"\n          ),\n          uiOutput(\"checkbox_screen_4\") #TODO\n        ),\n        sidebarPanel(\n          radioButtons(\n            inputId = \"graph_4_movie\",\n            label = \"Select a movie:\",\n            choices = distinct(labelled_ms,movie)$movie\n          ),\n          uiOutput(\"select_screen_4\")\n        )\n      )\n    ),\n    \n    #Screen 5\n    screen(\n      div(\n        p(\"This is the 5th chunk of words that I shall potentially write, look forward to it \\n\\n\\n\\n\\n heyhey\"),\n      ),\n      sidebarLayout(\n        mainPanel(\n          withSpinner( #https://www.rdocumentation.org/packages/shinycssloaders/versions/1.0.0/topics/withSpinner\n            ui_element = plotOutput(\"graph_5a\"),\n            image = \"loading_ghost.gif\",\n            image.width = \"400px\"\n          ),\n          withSpinner( #https://www.rdocumentation.org/packages/shinycssloaders/versions/1.0.0/topics/withSpinner\n            ui_element = plotOutput(\"graph_5b\"),\n            image = \"loading_ghost.gif\",\n            image.width = \"400px\"\n          )\n        ),\n        sidebarPanel(\n          uiOutput(\"select_screen_5\"),\n          \n          checkboxInput(inputId = \"graph_5_checkbox\",\n                        label = \"Exclude zeros\",\n                        value = FALSE),\n        )\n      )\n    )\n  ),\n  wellPanel(\n    selectInput(inputId = \"whats_fear\", \n                label = \"\\\"Fear\\\" labels\", \n                choices = distinct(exp_labelled_ms,label)$label, \n                multiple = TRUE, \n                selected = fear_labels,),\n  )\n)\n\n#Tabset panel for tabs (Example 6) runExample(\"06_tabsets\")\n\nserver <- function(input, output){\n  #https://mastering-shiny.org/action-graphics.html\n  \n  tidied_labelled_ms <- reactive(exp_labelled_ms %>%\n                                   mutate(is.fear = if_else(grepl(paste(fear_labels, collapse=\"|\"),label), \"Fear\",\"Others\")))\n\n  #Screen 1\n  graph_1 <- reactive(tidied_labelled_ms() %>% \n    group_by(cmpd) %>%\n    mutate(Tconc = sum(conc)) %>%\n    group_by(cmpd,is.fear) %>%\n    mutate(fraction = sum(conc)/Tconc) %>%\n    distinct(cmpd,is.fear,fraction) %>%\n    arrange(is.fear, desc(fraction)))\n  \n  # For use in interactive UI and others\n  fear_cmpd_ranked <- reactive(graph_1()$cmpd[1:(length(graph_1()$cmpd)/2)])\n  \n  # Interactive UI (Screen 2)\n  output$select_screen_2 <- renderUI({\n    selectInput(inputId = \"graph_2_cmpd\",\n                label = \"Choose a compound:\\n(Arranged by expected fear rank)\",\n                choices = fear_cmpd_ranked())\n  })\n  \n  # Interactive UI (Screen 4)\n  output$select_screen_4 <- renderUI({\n    selectInput(inputId = \"graph_4_cmpd\",\n                label = \"Choose a compound:\\n(Arranged by expected fear rank)\",\n                choices = fear_cmpd_ranked())\n  })\n  \n  # Interactive UI (Screen 5)\n  output$select_screen_5 <- renderUI({\n    selectInput(inputId = \"graph_5_cmpd\",\n                label = \"Choose a compound:\\n(Arranged by expected fear rank)\",\n                choices = fear_cmpd_ranked())\n  })\n  \n  #For later stuff\n  fear_cmpd_ranked <- reactive(graph_1()$cmpd[1:(length(graph_1()$cmpd)/2)])\n  \n  #For user input in shiny \n  user_start_rank_1 <- reactive(input$graph_1_rank[1])\n  user_end_rank_1 <- reactive(input$graph_1_rank[2])\n  \n  select_to_plot_1 <- reactive(graph_1()[c(user_start_rank_1():user_end_rank_1(), (length(graph_1()$cmpd)-user_start_rank_1()+1):(length(graph_1()$cmpd)-user_end_rank_1()+1)),])\n  \n  output$graph_1 <- renderPlot({\n    select_to_plot_1() %>%\n      group_by(is.fear) %>%\n      mutate(cmpd = fct_reorder(as.character(cmpd), fraction)) %>%\n      ggplot(aes(y = cmpd, x = fraction, fill = fct_reorder(is.fear, -fraction))) +\n      geom_col() + \n      labs(title = paste(\"Top\",user_start_rank_1(),\"to\",user_end_rank_1(),\"Most Frequently Emitted Compounds when in Fear\"),\n           subtitle = \"Identified by distribution across different types of scenes\",\n           y = \"m/z of Compound\", \n           x = \"Fraction of the Total Concentration\", \n           fill = \"Type of Scene\") + \n      scale_fill_manual(values=colour_palette) +\n      theme(panel.background = element_blank(),\n            axis.ticks.y = element_blank(),\n            axis.title.y = element_text(margin = margin(r = 10)),\n            axis.title.x = element_text(margin = margin(t = 10)),\n            plot.subtitle = element_text(margin = margin(b = 10))\n      ) + \n      scale_x_continuous(expand = c(0, 0))\n  })\n  \n  #Screen 2\n  #For user input in shiny\n  user_cmpd_2 <- reactive(input$graph_2_cmpd)\n  zeros <- reactive(input$graph_2_checkbox) #FALSE means do not exclude zeros\n  \n  graph_2 <- reactive(tidied_labelled_ms() %>% \n                        dplyr::filter(cmpd == user_cmpd_2()))\n  graph_2t <- reactive(graph_2())\n  \n  output$graph_2 <- renderPlot({\n    if(zeros() == TRUE){\n      graph_2t <- reactive(graph_2() %>% dplyr::filter(conc > 0))\n    } \n    graph_2t() %>% \n      ggplot(aes(x=conc_perpax, y=label)) + \n      geom_hex() +\n      labs(title = paste(\"Distribution of compound with m/z =\",user_cmpd_2(),\"across different scenes\"),\n           subtitle = paste(if_else(zeros() == FALSE, \"Excludes\", \"Includes\"), \"data points where compound is absent\"),\n           y = \"Type of Scene\", \n           x = \"Concentration per Pax per Scene\") + \n      scale_fill_gradientn(colours = colour_gradient)\n    })\n  \n  #Screen 3\n  #For user input in Shiny\n  user_movie_3 <- reactive(input$graph_3_movie)\n  user_top_cmpd_3 <- reactive(input$graph_3_rank[1]) #A range selected by user\n  user_bottom_cmpd_3 <- reactive(input$graph_3_rank[2])\n  user_count_cmpd_3 <- reactive(user_bottom_cmpd_3() - user_top_cmpd_3() + 1)\n  \n  #Vector of selected compounds\n  selected_cmpd_3 <- reactive(fear_cmpd_ranked()[user_top_cmpd_3():user_bottom_cmpd_3()])\n  \n  graph_3t <- reactive(labelled_ms %>% \n                         dplyr::filter(movie == user_movie_3()) %>%\n                         mutate(is.fear = if_else(grepl(paste(fear_labels, collapse=\"|\"),label), \"Fear\",\"Others\")) %>%\n                         dplyr::filter(cmpd %in% selected_cmpd_3()) %>% #Select top cmpd\n                         group_by(counter,cmpd) %>% #To add an ave conc common to similar movies\n                         mutate(average = mean(conc_perpax)) %>% \n                         group_by(cmpd) %>% \n                         mutate(sum = sum(conc)) %>% ungroup())\n\n  # Vector of absent cmpd (Complete Absence)\n  removed_cmpd <- reactive(dplyr::filter(distinct(graph_3t(), cmpd, sum), sum == 0)$cmpd)\n\n  graph_3 <- reactive(graph_3t() %>% \n                        dplyr::filter(sum != 0) %>% \n                        distinct(counter,cmpd, .keep_all = TRUE) %>% #To remove movie duplicates\n                        transform(cmpd=factor(cmpd, levels=selected_cmpd_3())) %>%\n                        arrange(cmpd, desc(is.fear)))\n  \n  # Plot\n  output$graph_3_no <- renderText({\"All compounds selected were absent throughout the movie selected.\"})\n  \n  output$graph_3_yes <- renderPlot({\n    graph_3() %>% #NOTE: IF PLOT CONC, A FEW COMPLETE ABSENCE\n      ggplot(aes(x=counter/2, y=average, colour=fct_inorder(is.fear))) + \n      geom_point(alpha=0.5)+ \n      facet_wrap(~ cmpd, \n                 ncol = ceiling(sqrt(user_count_cmpd_3()-length(removed_cmpd()))), \n                 scales=\"free\", \n                 labeller = as_labeller(~ paste0(\"No. \", user_top_cmpd_3() + which(selected_cmpd_3() %in% .x) - 1,\":\\n\", .x))) + \n      guides(color = guide_legend(reverse = TRUE)) +\n      labs(title = paste(\"Distribution of Top\", \n                         user_top_cmpd_3(), \n                         \"to\", \n                         user_bottom_cmpd_3(), \n                         \"Fear Compounds in\", \n                         user_movie_3()),\n           subtitle = \"Concentrations are averaged\",\n           y = \"Concentration per Scene\", \n           x = \"Duration of Movie\",\n           caption = str_wrap(paste(if_else(length(removed_cmpd())>1, \"Plots\", \"Plot\"),\n                                    \"for\",\n                                    if_else(length(removed_cmpd())>1, \"compounds\", \"compound\"),\n                                    \"with m/z =\",\n                                    paste(removed_cmpd(), collapse=\", \"), \n                                    if_else(length(removed_cmpd())>1, \"have\", \"has\"),\n                                    \"been removed due to absence throughout movie.\"), 150),\n           color = \"Type of Scene\") + \n      theme(axis.text.y = element_text(size=5),\n            axis.text.x = element_text(size=5),\n            strip.text = element_text(size=6, margin=margin(t=1,b=2)),\n            strip.background.x = element_rect(fill=colour_palette),\n            panel.spacing = unit(1, \"lines\"),\n            panel.background = element_blank(),\n            panel.border = element_rect(fill = NA, linewidth = 0.1, color = \"grey\"),\n            plot.caption = element_text(hjust=0)) +\n      scale_color_manual(values = colour_palette)\n  })\n  \n  output$graph_3 <- renderUI({\n    switch(if_else(length(graph_3()$cmpd) != 0, 1, 2),\n           withSpinner(\n             ui_element = plotOutput(\"graph_3_yes\"),\n             image = \"loading_ghost.gif\",\n             image.width = \"400px\"),\n           verbatimTextOutput(\"graph_3_no\"))\n  }) #SWITCH() https://stackoverflow.com/questions/70348671/how-to-display-outputs-based-on-radio-button-in-r-shiny\n  \n  # Screen 4\n  #For user input in Shiny\n  user_movie_4 <- reactive(input$graph_4_movie)\n  user_cmpd_4 <- reactive(input$graph_4_cmpd)\n  \n  # Interactive UI (Screen 4) TODO Select all: https://stackoverflow.com/questions/28829682/r-shiny-checkboxgroupinput-select-all-checkboxes-by-click\n  # NOTE: Mistake -> needa filter user_movie_4() --> BUT, when did that, error --> should try reactive({}) or filter through screen_times next\n  user_movie_4_indices <- reactive(labelled_ms %>% \n      dplyr::filter(movie == user_movie_4()) %>%\n      distinct(movie_F_ind) %>% '[['(\"movie_F_ind\"))\n  \n  ui_4_screens <- reactive({\n    list <- tagList()\n    for(i in user_movie_4_indices()){\n      list <- list.append(list, div(\n        p(paste(\"Screening:\",i)),\n        p(paste(\"Scheduled for\",screen_times$scheduled[i])),\n        p(paste(\"Occupied by\",screen_times$number.visitors[i], \"people\")),\n        p(paste(screen_times$filled..[i],\"% filled\", sep=\"\"))\n      ))\n    }\n    return(list)\n  })\n  \n  output$checkbox_screen_4 <- renderUI({ \n    checkboxGroupInput(inputId = \"graph_4_details\",\n                       label = \"Select desired screenings:\",\n                       selected = user_movie_4_indices(),\n                       choiceNames = ui_4_screens(),\n                       choiceValues = user_movie_4_indices(),\n                       inline = TRUE)  \n  })\n  \n  graph_4 <- reactive(tidied_labelled_ms() %>% arrange(is.fear) %>%\n                        distinct(Time, cmpd, .keep_all = TRUE) %>% #To remove expanded labels\n                        arrange(counter, cmpd) %>% \n                        dplyr::filter(cmpd == user_cmpd_4()) %>% #Select top cmpd\n                        dplyr::filter(movie == user_movie_4()) %>% #Select 1 movie\n                        mutate(movie_F_ind = fct_reorder2(as.character(movie_F_ind), counter, conc_perpax)) %>% \n                        arrange(movie_F_ind) %>% \n                        dplyr::filter(movie_F_ind %in% input$graph_4_details)) #JY: To filter screenings (All else run well)\n  \n  Others_4 <- reactive(graph_4() %>% mutate(conc_perpax=(max(conc_perpax)+min(conc_perpax))/2) %>% dplyr::filter(is.fear == \"Others\", movie_F_ind==graph_4()$movie_F_ind[1]))\n  Fear_4 <- reactive(graph_4() %>% mutate(conc_perpax=(max(conc_perpax)+min(conc_perpax))/2) %>% dplyr::filter(is.fear == \"Fear\", movie_F_ind==graph_4()$movie_F_ind[1]))\n  \n  output$graph_4 <- renderPlot({\n    graph_4() %>%\n      ggplot(aes(x=counter/2, y=conc_perpax)) + \n      geom_tile(data = Fear_4(),\n                height=max(graph_4()$conc_perpax)-min(graph_4()$conc_perpax),\n                aes(fill=\"Fear\"),linetype=0,alpha=0.3) +\n      geom_tile(data = Others_4(), \n                height=max(graph_4()$conc_perpax)-min(graph_4()$conc_perpax), \n                aes(fill=\"Others\"),linetype=0,alpha=0.1) +\n      geom_line(aes(group = movie_F_ind, color = movie_F_ind)) +\n      labs(title = paste(\"Distribution of compound with m/z =\", \n                         user_cmpd_4(), \n                         \"across duration of\", \n                         user_movie_4()),\n           subtitle = \"Each screening is represented by a line graph.\",\n           y = \"Concentration per Scene\", \n           x = \"Duration of Movie (min)\",\n           color = \"Screening\",\n           fill = \"Type of Scene\") + \n      theme(panel.background = element_blank()) + \n      scale_fill_manual(values = colour_bkg) +\n      scale_color_manual(values = colour_palette) +\n      scale_x_continuous(expand = c(0, 0)) + \n      scale_y_continuous(expand = c(0, 0))\n  })\n  \n  # Print Screening Details (By clicking on label) (TODO)\n  #graph_4 %>% distinct(movie_F_ind) %>% arrange(movie_F_ind)\n  # movie A \n  #graph_4 %>% distinct(movie_F_ind) %>% arrange(movie_F_ind) # %>% ...\n  # No. of people, Time of day, Date (Maybe got spoilers so less scared haha)\n  \n  # Screen 5\n  user_cmpd_5 <- reactive(input$graph_5_cmpd) #SELECT from really narrowed few (TODO)\n  \n  graph_5_fixed <- ms_data %>%\n    group_by(cmpd,movie) %>%\n    mutate(overall_ave_conc_perpax = mean(conc_perpax)) %>% ungroup()\n  \n  graph_5 <- reactive(\n    graph_5_fixed %>%\n      dplyr::filter(cmpd == user_cmpd_5())\n    )\n  \n  graph_5a <- reactive(graph_5())\n  \n  output$graph_5a <- renderPlot({\n    if(input$graph_5_checkbox){\n      graph_5a <- reactive(graph_5() %>%\n        dplyr::filter(conc_perpax>0))\n    }\n    \n    graph_5a() %>% \n      ggplot(aes(x = conc_perpax, y = movie)) +\n      geom_boxplot() +\n      labs(x = \"Concentration per Pax per Scene\", \n           y = \"Movie\",\n           title = paste(\"Distribution of compound with m/z =\", user_cmpd_5()))\n  })\n  \n  output$graph_5b <- renderPlot({\n    graph_5()  %>%\n      distinct(movie, overall_ave_conc_perpax, .keep_all = TRUE) %>% \n      mutate(fear_rating = screen_times$fear_rating[movie_F_ind]) %>%\n      ggplot(aes(x = fear_rating, y = overall_ave_conc_perpax)) +\n      geom_point() + geom_line() + \n      labs(x = \"Online Fear Ratings\",\n           y = \"Average Concentration per Pax per Scene\",\n           title = \"Comparison of Actual and Expected Fear Ratings\", \n           subtitle = paste(\"Based on compound with m/z =\",user_cmpd_5()), \n           #caption = \"Fear ratings are an average of rating obtained from Reel Scary and Common Sense Media\",\n           caption=a(\"ggplot2 Package\", href = \"https://ggplot2.tidyverse.org/\"))\n  })\n    \n}\n\nshinyApp(ui = ui, server = server)\n```\n<p>Placeholder for Write-up</p>\n<iframe height=\"150%\" width=\"100%\" frameborder=\"no\" src=\"https://andrea-jy.shinyapps.io/datastory_rough/\"></iframe>\nPlaceholder for Visualisations^"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"filters":["shinylive"],"output-file":"datastory.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.433","editor":"visual","theme":"minty","title":"Is the smell of fear real?"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}