{
  "hash": "28b48c17fe67402baf60ac8a29e1f00b",
  "result": {
    "markdown": "---\ntitle: \"Is the smell of fear real?\"\nfilters: \n  - shinylive\n---\n\n<p>Placeholder for Write-up</p>\n<iframe height=\"100%\" width=\"100%\" frameborder=\"no\" src=\"https://andrea-jy.shinyapps.io/datastory/\"></iframe>\n\n\n::: {.cell}\n\n:::\n\n\n```{shinylive-r}\n#| standalone: true\n\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(dplyr)\n\n# Define UI for app that draws a histogram ----\nui <- fluidPage(\n  \n  # App title ----\n  titlePanel(\"Andrea's Shiny Example :)\"),\n  \n  # Sidebar layout with input and output definitions ----\n  sidebarLayout(\n    \n    # Sidebar panel for inputs ----\n    sidebarPanel(\n      \n      selectInput(inputId = \"dataset\",\n                  label = \"Choose a dataset:\",\n                  choices = c(\"Cat Lovers\", \"DJs\", \"Hotels\"),\n                  selected = \"Hotels\"),\n      \n      \n      # Input: Slider for the number of bins ----\n      sliderInput(inputId = \"bins\",\n                  label = \"Number of bins:\",\n                  min = 1,\n                  max = 50,\n                  value = 10)\n      \n    ),\n    \n    # Main panel for displaying outputs ----\n    mainPanel(\n      \n      # Output: Histogram ----\n      plotOutput(outputId = \"distPlot\")\n      \n    )\n  )\n)\n\n# Define server logic required to draw a histogram ----\nserver <- function(input, output) {\n  \n  cat_lovers <- read.csv(\"cat-lovers.csv\")\n  playlist_data <- read.csv(\"playlist_data.csv\")\n  hotels <- read.csv(\"hotels.csv\")\n  \n  datasetInput <- reactive({\n    switch(input$dataset,\n           \"Cat Lovers\" = as.integer(filter(cat_lovers, as.integer(number_of_cats) != \"NA\")$number_of_cats),\n           \"DJs\" = playlist_data$Plays_Per_Week,\n           \"Hotels\" = hotels$lead_time)\n  })\n  \n  output$distPlot <- renderPlot({\n    \n    x <- datasetInput()\n    print(max(x))\n    bins <- seq(min(x), max(x), length.out = input$bins + 1)\n    \n    hist(x, breaks = bins, col = \"#75AADB\", border = \"white\",\n         xlab = if_else(input$dataset == \"Cat Lovers\", \"Number of Cats\", if_else(input$dataset == \"DJs\", \"Plays per week\", \"Lead time\")),\n         main = if_else(input$dataset == \"Cat Lovers\", \"Histogram of the Number of Cats owned by Cat lovers\", if_else(input$dataset == \"DJs\", \"Histogram of plays per week by DJs\", \"Histogram of Hotel Lead Times\")))\n    \n  })\n  \n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n```\n\n```{shinylive-r}\n#| standalone: true\nlibrary(shiny)\nlibrary(shinyglide)\nlibrary(slickR)\nlibrary(ggplot2)\n\nui <- fluidPage(\n  titlePanel(\"Is the smell of fear real?\"),\n  tags$style(\n    \".left-centered {position: absolute; top: 45%; transform: translate(0,-75%);}\",\n    \".right-centered {position: absolute; top: 45%; right: 0%; transform: translate(0,-75%);}\",\n    \".glidecontent {padding-left: 40px; padding-right: 40px; padding-bottom: 10px;}\"\n  ),\n  glide(\n    id = \"description\",\n    custom_controls = div(glideControls(\n      prevButton(class=\"left-centered\"),\n      nextButton(class=\"right-centered\")\n    )),\n    controls_position = \"bottom\",\n    previous_label = \"<\",\n    next_label = \"hello>\",\n    \n    screen(\n      div(class=\"glidecontent\",\n        p(\"This is the first screen\")\n      )\n    ),\n    screen(\n      div(class=\"glidecontent\",\n          p(\"This is the second and final screen.\")\n      )\n    )\n  ),\n  mainPanel(\n    slickROutput(outputId=\"maintextbar\", width = \"100%\")\n  )\n  #Tabset panel for tabs (Example 6) runExample(\"06_tabsets\")\n)\n\nserver <- function(input, output){\n  output$maintextbar <- renderSlickR({\n    text <- c(\"I like books\", \"books are fun\")\n    slickR(text)\n  })\n}\n\nshinyApp(ui = ui, server = server)\n```",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}