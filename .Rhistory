discard(function(x){all((is.na(x)|x<0) & is.numeric(x))}) %>%
rename_if(grepl("^m\\d", names(.)), ~ sub("m","",.))
# Set factor for Time Column to scale with actual time
valid_ms$Time <- factor(valid_ms$Time,
levels=unique(valid_ms$Time))
valid_ms <- valid_ms %>%
dplyr::filter(!is.na(label) | (is.na(label) & !grepl(paste(labelled_movies, collapse="|"), movie))) %>%
group_by(movie_F_ind) %>% #To add a counter common to movie duplicates
mutate(counter = row_number(movie_F_ind))%>% #To compile all cmpds in 1 column
pivot_longer(
cols = matches("^\\d"),
names_to = "cmpd",
values_to = "conc"
) %>% #To correct for noise in baseline + Conc per pax
mutate(conc=if_else(conc<0|is.na(conc), 0,conc),
conc_perpax = conc/Final_screen_times$number.visitors[movie_F_ind]) %>% ungroup() %>%
pivot_wider(
names_from = "cmpd",
values_from = c("conc", "conc_perpax")
)
write.csv(valid_ms, "./src/data/cleaned/snipped_ms_data.csv", row.names=FALSE)
valid_ms <- data.frame(ms_data[0,])
for(i in 1:length(t_start_ind)){
est_act_start_ind <- t_end_ind[i]-2*screen_times$minutes[movie_ind[i]] + 1
valid_ms <- rbind(valid_ms, ms_data[est_act_start_ind:t_end_ind[i],])
}
# Discard column where all values are NA + Rename cmpds to exclude "m"
valid_ms <- valid_ms %>%
discard(function(x){all((is.na(x)|x<0) & is.numeric(x))}) %>%
rename_if(grepl("^m\\d", names(.)), ~ sub("m","",.))
# Set factor for Time Column to scale with actual time
valid_ms$Time <- factor(valid_ms$Time,
levels=unique(valid_ms$Time))
valid_ms <- valid_ms %>%
dplyr::filter(!is.na(label) | (is.na(label) & !grepl(paste(labelled_movies, collapse="|"), movie))) %>%
group_by(movie_F_ind) %>% #To add a counter common to movie duplicates
mutate(counter = row_number(movie_F_ind))%>% #To compile all cmpds in 1 column
pivot_longer(
cols = matches("^\\d"),
names_to = "cmpd",
values_to = "conc"
) %>% #To correct for noise in baseline + Conc per pax
mutate(conc=if_else(conc<0|is.na(conc), 0,conc)) %>% ungroup() %>%
pivot_wider(
names_from = "cmpd",
values_from = c("conc")
)
write.csv(valid_ms, "./src/data/cleaned/snipped_ms_data.csv", row.names=FALSE)
# Importing Cleaned Datasets
labelled_movies <- c("Buddy","Hobbit","Machete","Mitty","Paranormal","Hunger")
#for(i in labelled_movies){assign(i,read_csv(sprintf("./src/data/cleaned/%s_cleaned.csv",i)))}
# Importing Snipped Datasets
for(i in c("ms_data","screen_times")){
assign(i,read_csv(sprintf("./src/data/cleaned/snipped_%s.csv",i)))
}
# Labelled ms_data (Only 6 diff movies)
labelled_ms <- ms_data %>%
dplyr::filter(!is.na(label)) %>%
pivot_longer(
cols = matches("^\\d"),
names_to = "cmpd",
values_to = "conc"
) %>%
mutate(conc_perpax = conc/screen_times$number.visitors[movie_F_ind])
exp_labelled_ms <- labelled_ms %>% #To separate labels
separate_longer_delim(
cols = label,
delim = "; "
)
fear_labels <- grep("death|suspense|horror|murder|aggressive|violence|shock", distinct(exp_labelled_ms,label)$label, value=TRUE)
tidied_labelled_ms <- exp_labelled_ms %>% #To categorise fear and non-fear labels
mutate(is.fear = if_else(label %in% fear_labels, "Fear","Others")) #(TODO: SHINY SELECT WHAT's FEAR)
# Unlabelled ms_data (Excluding the buffer time before labelled movies start)
unlabelled_ms <- ms_data %>%
dplyr::filter(is.na(label))
ui <- fluidPage(
checkboxGroupInput("icons", "Choose icons:",
choiceNames =
list(tags$a("calendar"), tags$a("bed"),
tags$a("cog"), tags$a("bug")),
choiceValues =
c("calendar", "bed", "cog", "bug")
),
textOutput("txt")
)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
ui <- fluidPage(
checkboxGroupInput("variable", "Variables to show:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
)
ui <- fluidPage(
checkboxGroupInput("variable", "Variables to show:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
)
icons <- paste(input$icons, collapse = ", ")
server <- function(input, output, session) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
if (interactive()) {
ui <- fluidPage(
checkboxGroupInput("variable", "Variables to show:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
)
server <- function(input, output, session) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
shinyApp(ui, server)
ui <- fluidPage(
checkboxGroupInput("icons", "Choose icons:",
choiceNames =
list(tags$a("calendar"), tags$a("bed"),
tags$a("cog"), tags$a("bug")),
choiceValues =
c("calendar", "bed", "cog", "bug")
),
textOutput("txt")
)
server <- function(input, output, session) {
output$txt <- renderText({
icons <- paste(input$icons, collapse = ", ")
paste("You chose", icons)
})
}
shinyApp(ui, server)
}
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
ui <- fluidPage(
checkboxGroupInput("icons", "Choose icons:",
selected = c("calendar","bed"),
choiceNames =
list(tags$a("calendar"), tags$a("bed"),
tags$a("cog"), tags$a("bug")),
choiceValues =
c("calendar", "bed", "cog", "bug")
),
textOutput("txt")
)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
if (interactive()) {
ui <- fluidPage(
checkboxGroupInput("variable", "Variables to show:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
)
server <- function(input, output, session) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
shinyApp(ui, server)
ui <- fluidPage(
checkboxGroupInput("icons", "Choose icons:",
selected = c("calendar","bed"),
choiceNames =
list(tags$a("calendar"), tags$a("bed"),
tags$a("cog"), tags$a("bug")),
choiceValues =
c("calendar", "bed", "cog", "bug")
),
textOutput("txt")
)
server <- function(input, output, session) {
output$txt <- renderText({
icons <- paste(input$icons, collapse = ", ")
paste("You chose", icons)
})
}
shinyApp(ui, server)
}
# Importing Cleaned Datasets
labelled_movies <- c("Buddy","Hobbit","Machete","Mitty","Paranormal","Hunger")
#for(i in labelled_movies){assign(i,read_csv(sprintf("./src/data/cleaned/%s_cleaned.csv",i)))}
# Importing Snipped Datasets
for(i in c("ms_data","screen_times")){
assign(i,read_csv(sprintf("./src/data/cleaned/snipped_%s.csv",i)))
}
# Labelled ms_data (Only 6 diff movies)
labelled_ms <- ms_data %>%
dplyr::filter(!is.na(label)) %>%
pivot_longer(
cols = matches("^\\d"),
names_to = "cmpd",
values_to = "conc"
) %>%
mutate(conc_perpax = conc/screen_times$number.visitors[movie_F_ind])
exp_labelled_ms <- labelled_ms %>% #To separate labels
separate_longer_delim(
cols = label,
delim = "; "
)
fear_labels <- grep("death|suspense|horror|murder|aggressive|violence|shock", distinct(exp_labelled_ms,label)$label, value=TRUE)
tidied_labelled_ms <- exp_labelled_ms %>% #To categorise fear and non-fear labels
mutate(is.fear = if_else(label %in% fear_labels, "Fear","Others")) #(TODO: SHINY SELECT WHAT's FEAR)
# Unlabelled ms_data (Excluding the buffer time before labelled movies start)
unlabelled_ms <- ms_data %>%
dplyr::filter(is.na(label))
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
install.packages("r.list")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
for(i in c("calendar", "bed", "cog", "bug")){
list <- append(list, tags$div(i))
}
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
output$txt <- renderText({
icons <- paste(input$icons, collapse = ", ")
paste("You chose", mylist, icons)
})
source("~/.active-rstudio-document")
if (interactive()) {
ui <- fluidPage(
checkboxGroupInput("variable", "Variables to show:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
)
server <- function(input, output, session) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
shinyApp(ui, server)
mylist <- list(1,2,3,4)
for(i in c("calendar", "bed", "cog", "bug")){
mylist <- append(list, tags$div(i))
}
ui <- fluidPage(
checkboxGroupInput("icons", "Choose icons:",
selected = c("calendar","bed"),
choiceNames = list(1,2,3,4),
choiceValues = c("calendar", "bed", "cog", "bug")
),
textOutput("txt")
)
server <- function(input, output, session) {
output$txt <- renderText({
icons <- paste(input$icons, collapse = ", ")
paste("You chose", mylist, icons)
})
}
shinyApp(ui, server)
}
if (interactive()) {
ui <- fluidPage(
checkboxGroupInput("variable", "Variables to show:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
)
server <- function(input, output, session) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
shinyApp(ui, server)
mylist <- list(1,2,3,4)
mylist <- append(list, div(i))
ui <- fluidPage(
checkboxGroupInput("icons", "Choose icons:",
selected = c("calendar","bed"),
choiceNames = list(1,2,3,4),
choiceValues = c("calendar", "bed", "cog", "bug")
),
textOutput("txt")
)
server <- function(input, output, session) {
output$txt <- renderText({
icons <- paste(input$icons, collapse = ", ")
paste("You chose", mylist, icons)
})
}
shinyApp(ui, server)
}
source("~/.active-rstudio-document")
if (interactive()) {
ui <- fluidPage(
checkboxGroupInput("variable", "Variables to show:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
)
server <- function(input, output, session) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
shinyApp(ui, server)
mylist <- list()
mylist <- append(list, div(i))
ui <- fluidPage(
checkboxGroupInput("icons", "Choose icons:",
selected = c("calendar","bed"),
choiceNames = list(1,2,3,4),
choiceValues = c("calendar", "bed", "cog", "bug")
),
textOutput("txt")
)
server <- function(input, output, session) {
output$txt <- renderText({
icons <- paste(input$icons, collapse = ", ")
paste("You chose", mylist, icons)
})
}
shinyApp(ui, server)
}
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
if (interactive()) {
ui <- fluidPage(
checkboxGroupInput("variable", "Variables to show:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
)
server <- function(input, output, session) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
shinyApp(ui, server)
mylist <- list()
mylist <- append(list, div(i))
ui <- fluidPage(
checkboxGroupInput("icons", "Choose icons:",
selected = c("calendar","bed"),
choiceNames = list(1,2,3,4),
choiceValues = c("calendar", "bed", "cog", "bug")
),
textOutput("txt")
)
server <- function(input, output, session) {
output$txt <- renderText({
icons <- paste(input$icons, collapse = ", ")
paste("You chose", mylist, icons)
})
}
shinyApp(ui, server)
}
source("~/.active-rstudio-document")
if (interactive()) {
ui <- fluidPage(
checkboxGroupInput("variable", "Variables to show:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
)
server <- function(input, output, session) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
shinyApp(ui, server)
ui <- fluidPage(
checkboxGroupInput("icons", "Choose icons:",
selected = c("calendar","bed"),
choiceNames = list(1,2,3,4),
choiceValues = c("calendar", "bed", "cog", "bug")
),
textOutput("txt")
)
server <- function(input, output, session) {
output$txt <- renderText({
icons <- paste(input$icons, collapse = ", ")
paste("You chose", icons)
})
}
shinyApp(ui, server)
}
if (interactive()) {
ui <- fluidPage(
checkboxGroupInput("variable", "Variables to show:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
)
server <- function(input, output, session) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
shinyApp(ui, server)
list <- list()
for(i in c("calendar", "bed","cog","bug")){
list <- append(list,i)
}
ui <- fluidPage(
checkboxGroupInput("icons", "Choose icons:",
selected = c("calendar","bed"),
choiceNames = list(1,2,3,4),
choiceValues = c("calendar", "bed", "cog", "bug")
),
textOutput("txt")
)
server <- function(input, output, session) {
output$txt <- renderText({
icons <- paste(input$icons, collapse = ", ")
paste("You chose", icons)
list
})
}
shinyApp(ui, server)
}
if (interactive()) {
ui <- fluidPage(
checkboxGroupInput("variable", "Variables to show:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
)
server <- function(input, output, session) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
shinyApp(ui, server)
list <-
for(i in c("calendar", "bed","cog","bug")){
list <- append(list,i)
}
ui <- fluidPage(
checkboxGroupInput("icons", "Choose icons:",
selected = c("calendar","bed"),
choiceNames = list(1,2,3,4),
choiceValues = c("calendar", "bed", "cog", "bug")
),
textOutput("txt")
)
server <- function(input, output, session) {
output$txt <- renderText({
icons <- paste(input$icons, collapse = ", ")
paste("You chose", icons,list)
})
}
shinyApp(ui, server)
}
if (interactive()) {
ui <- fluidPage(
checkboxGroupInput("variable", "Variables to show:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
)
server <- function(input, output, session) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
shinyApp(ui, server)
list <- list()
for(i in c("calendar", "bed","cog","bug")){
list <- append(list,i)
}
ui <- fluidPage(
checkboxGroupInput("icons", "Choose icons:",
selected = c("calendar","bed"),
choiceNames = list(1,2,3,4),
choiceValues = c("calendar", "bed", "cog", "bug")
),
textOutput("txt")
)
server <- function(input, output, session) {
output$txt <- renderText({
icons <- paste(input$icons, collapse = ", ")
paste("You chose", icons,list)
})
}
shinyApp(ui, server)
}
runApp('C:/Users/User/Desktop/NM2207/GitHub/jyapple15.github.io/datastory.R')
rlang::last_trace()
runApp('C:/Users/User/Desktop/NM2207/GitHub/jyapple15.github.io/datastory.R')
runApp('C:/Users/User/Desktop/NM2207/GitHub/jyapple15.github.io/datastory.R')
runApp('C:/Users/User/Desktop/NM2207/GitHub/jyapple15.github.io/datastory.R')
