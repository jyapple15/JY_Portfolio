graph_4 %>% distinct(movie_F_ind) %>% arrange(movie_F_ind)
# movie A
graph_4 %>% distinct(movie_F_ind) %>% arrange(movie_F_ind) # %>% ...
# No. of people, Time of day, Date (Maybe got spoilers so less scared haha)
# Graph 1
# A segmented bar plot of compound concentrations against compound mass labels. Bar plots will be segmented by total % concentration under each fear label. This will allow us to observe which compounds are most commonly present when in fear. Based on the observations, a narrowed list of compounds will be analysed in the later graphs (List A)
#Chosen Colour Palette (TODO)
colour_palette <- c("#a9a9f9","#009699","red","orange","yellow","green")
colour_gradient <- c("#009699","royalblue","#a9a9f9") #Low to high conc
colour_bkg <- c("#a9a9f9","#009699") #contrasting w each other and w palette
#Scenes were double-counted if fell under both fear and non-fear scene labels
graph_1 <- tidied_labelled_ms %>% #To introduce %
group_by(cmpd) %>%
mutate(Tconc = sum(conc)) %>%
group_by(cmpd,is.fear) %>%
mutate(fraction = sum(conc)/Tconc) %>%
distinct(cmpd,is.fear,fraction) %>%
arrange(is.fear, desc(fraction))
#For later stuff
fear_cmpd_ranked <- graph_1$cmpd[1:(length(graph_1$cmpd)/2)]
#For user input in shiny (TODO)
start_rank <- 1
end_rank <- 25
select_to_plot_1 <- graph_1[c(start_rank:end_rank, (length(graph_1$cmpd)-start_rank+1):(length(graph_1$cmpd)-end_rank+1)),]
select_to_plot_1 %>%
group_by(is.fear) %>%
mutate(cmpd = fct_reorder(cmpd, fraction)) %>%
ggplot(aes(y = cmpd, x = fraction, fill = fct_reorder(is.fear, -fraction))) +
geom_col() +
labs(title = paste("Top",start_rank,"to",end_rank,"Most Frequently Emitted Compounds when in Fear"),
subtitle = "Identified by distribution across different types of scenes",
y = "m/z of Compound",
x = "Fraction of the Total Concentration",
fill = "Type of Scene") +
scale_fill_manual(values=colour_palette)
#scale_fill_manual(values=c("red","blue")
#scale_x_discrete(guide=guide_axis(angle=90))
#scale_fill_brewer(palette="Set3")
# Graph 5 (now 4)
# For a chosen compound, different screenings of the same movie are selected and the concentration of that compound against time is plot and overlaid for the different screenings. These screenings will be selected according to a criteria set by the user, such that the other variables for those screenings are relatively similar. This allows us to observe for any trends between the compound emission and factors such as the time of day, type of fear, and the influence of people.
# Hover for zoom in of that specific screening plot (TODO)
# Selection of screenings to focus on (TODO)
#For user input in Shiny (TODO)
user_movie_4 <- "Paranormal Activity: The Marked Ones"
user_cmpd_4 <- "19.0096" #A range selected by user
graph_4 <- tidied_labelled_ms %>% arrange(is.fear) %>%
distinct(Time, cmpd, .keep_all = TRUE) %>% #To remove expanded labels
arrange(counter, cmpd) %>%
dplyr::filter(cmpd == user_cmpd_4) %>% #Select top cmpd
dplyr::filter(movie==user_movie_4) %>% #Select 1 movie
mutate(movie_F_ind = fct_reorder2(as.character(movie_F_ind), counter, conc_perpax)) %>% arrange(movie_F_ind)
# FOR SCREENING SELECTION (TODO)
# %>% dplyr::filter(movie_F_ind %in% c(99,100))
Others_4 <- graph_4 %>% mutate(conc_perpax=(max(conc_perpax)+min(conc_perpax))/2) %>% dplyr::filter(is.fear == "Others", movie_F_ind==graph_4$movie_F_ind[1])
Fear_4 <- graph_4 %>% mutate(conc_perpax=(max(conc_perpax)+min(conc_perpax))/2) %>% dplyr::filter(is.fear == "Fear", movie_F_ind==graph_4$movie_F_ind[1])
graph_4 %>% #NOTE: IF PLOT CONC, A FEW COMPLETE ABSENCE
ggplot(aes(x=counter/2, y=conc_perpax)) +
geom_tile(data = Fear_4,
height=max(graph_4$conc_perpax)-min(graph_4$conc_perpax)+2,
aes(fill="Fear"),linetype=0,alpha=0.3) +
geom_tile(data = Others_4,
height=max(graph_4$conc_perpax)-min(graph_4$conc_perpax)+2,
aes(fill="Others"),linetype=0,alpha=0.1) +
geom_line(aes(group = movie_F_ind, color = movie_F_ind)) +
labs(title = paste("Distribution of compound with m/z =",
user_cmpd_4,
"across duration of",
user_movie_4),
subtitle = "Each screening is represented by a line graph.",
y = "Concentration per Scene",
x = "Duration of Movie (min)",
color = "Screening",
fill = "Type of Scene") +
scale_color_hue(labels = LETTERS) +
theme(panel.background = element_blank()) +
scale_fill_manual(values = colour_bkg) +
scale_color_manual(values = colour_palette) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))
# Print Screening Details (By clicking on label) (TODO)
graph_4 %>% distinct(movie_F_ind) %>% arrange(movie_F_ind)
# movie A
graph_4 %>% distinct(movie_F_ind) %>% arrange(movie_F_ind) # %>% ...
# No. of people, Time of day, Date (Maybe got spoilers so less scared haha)
graph_4 %>% #NOTE: IF PLOT CONC, A FEW COMPLETE ABSENCE
ggplot(aes(x=counter/2, y=conc_perpax)) +
geom_tile(data = Fear_4,
height=max(graph_4$conc_perpax)-min(graph_4$conc_perpax)+2,
aes(fill="Fear"),linetype=0,alpha=0.3) +
geom_tile(data = Others_4,
height=max(graph_4$conc_perpax)-min(graph_4$conc_perpax)+2,
aes(fill="Others"),linetype=0,alpha=0.1) +
geom_line(aes(group = movie_F_ind, color = movie_F_ind)) +
labs(title = paste("Distribution of compound with m/z =",
user_cmpd_4,
"across duration of",
user_movie_4),
subtitle = "Each screening is represented by a line graph.",
y = "Concentration per Scene",
x = "Duration of Movie (min)",
color = "Screening",
fill = "Type of Scene") +
scale_color_hue(labels = LETTERS) +
theme(panel.background = element_blank()) +
scale_fill_manual(values = colour_bkg) +
scale_color_manual(values = colour_palette) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))
+
scale_color_hue(labels = LETTERS)
graph_4 %>% #NOTE: IF PLOT CONC, A FEW COMPLETE ABSENCE
ggplot(aes(x=counter/2, y=conc_perpax)) +
geom_tile(data = Fear_4,
height=max(graph_4$conc_perpax)-min(graph_4$conc_perpax)+2,
aes(fill="Fear"),linetype=0,alpha=0.3) +
geom_tile(data = Others_4,
height=max(graph_4$conc_perpax)-min(graph_4$conc_perpax)+2,
aes(fill="Others"),linetype=0,alpha=0.1) +
geom_line(aes(group = movie_F_ind, color = movie_F_ind)) +
labs(title = paste("Distribution of compound with m/z =",
user_cmpd_4,
"across duration of",
user_movie_4),
subtitle = "Each screening is represented by a line graph.",
y = "Concentration per Scene",
x = "Duration of Movie (min)",
color = "Screening",
fill = "Type of Scene")+
theme(panel.background = element_blank()) +
scale_fill_manual(values = colour_bkg) +
scale_color_manual(values = colour_palette) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
scale_color_hue(labels = LETTERS)
graph_4 %>% #NOTE: IF PLOT CONC, A FEW COMPLETE ABSENCE
ggplot(aes(x=counter/2, y=conc_perpax)) +
geom_tile(data = Fear_4,
height=max(graph_4$conc_perpax)-min(graph_4$conc_perpax)+2,
aes(fill="Fear"),linetype=0,alpha=0.3) +
geom_tile(data = Others_4,
height=max(graph_4$conc_perpax)-min(graph_4$conc_perpax)+2,
aes(fill="Others"),linetype=0,alpha=0.1) +
geom_line(aes(group = movie_F_ind, color = movie_F_ind)) +
labs(title = paste("Distribution of compound with m/z =",
user_cmpd_4,
"across duration of",
user_movie_4),
subtitle = "Each screening is represented by a line graph.",
y = "Concentration per Scene",
x = "Duration of Movie (min)",
color = "Screening",
fill = "Type of Scene")+
theme(panel.background = element_blank()) +
scale_fill_manual(values = colour_bkg) +
scale_color_manual(values = colour_palette) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
scale_color_hue(labels = LETTERS)
graph_4 %>% #NOTE: IF PLOT CONC, A FEW COMPLETE ABSENCE
ggplot(aes(x=counter/2, y=conc_perpax)) +
geom_tile(data = Fear_4,
height=max(graph_4$conc_perpax)-min(graph_4$conc_perpax)+2,
aes(fill="Fear"),linetype=0,alpha=0.3) +
geom_tile(data = Others_4,
height=max(graph_4$conc_perpax)-min(graph_4$conc_perpax)+2,
aes(fill="Others"),linetype=0,alpha=0.1) +
geom_line(aes(group = movie_F_ind, color = movie_F_ind)) +
labs(title = paste("Distribution of compound with m/z =",
user_cmpd_4,
"across duration of",
user_movie_4),
subtitle = "Each screening is represented by a line graph.",
y = "Concentration per Scene",
x = "Duration of Movie (min)",
color = "Screening",
fill = "Type of Scene")+
theme(panel.background = element_blank()) +
scale_fill_manual(values = colour_bkg) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
scale_color_hue(labels = LETTERS) +
scale_color_manual(values = colour_palette)
graph_4 %>% #NOTE: IF PLOT CONC, A FEW COMPLETE ABSENCE
ggplot(aes(x=counter/2, y=conc_perpax)) +
geom_tile(data = Fear_4,
height=max(graph_4$conc_perpax)-min(graph_4$conc_perpax)+2,
aes(fill="Fear"),linetype=0,alpha=0.3) +
geom_tile(data = Others_4,
height=max(graph_4$conc_perpax)-min(graph_4$conc_perpax)+2,
aes(fill="Others"),linetype=0,alpha=0.1) +
geom_line(aes(group = movie_F_ind, color = movie_F_ind)) +
labs(title = paste("Distribution of compound with m/z =",
user_cmpd_4,
"across duration of",
user_movie_4),
subtitle = "Each screening is represented by a line graph.",
y = "Concentration per Scene",
x = "Duration of Movie (min)",
color = "Screening",
fill = "Type of Scene") +
scale_color_hue(labels = LETTERS) +
theme(panel.background = element_blank()) +
scale_fill_manual(values = colour_bkg) +
scale_color_manual(values = colour_palette, labels=LETTERS) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))
graph_4 %>% #NOTE: IF PLOT CONC, A FEW COMPLETE ABSENCE
ggplot(aes(x=counter/2, y=conc_perpax)) +
geom_tile(data = Fear_4,
height=max(graph_4$conc_perpax)-min(graph_4$conc_perpax)+2,
aes(fill="Fear"),linetype=0,alpha=0.3) +
geom_tile(data = Others_4,
height=max(graph_4$conc_perpax)-min(graph_4$conc_perpax)+2,
aes(fill="Others"),linetype=0,alpha=0.1) +
geom_line(aes(group = movie_F_ind, color = movie_F_ind)) +
labs(title = paste("Distribution of compound with m/z =",
user_cmpd_4,
"across duration of",
user_movie_4),
subtitle = "Each screening is represented by a line graph.",
y = "Concentration per Scene",
x = "Duration of Movie (min)",
color = "Screening",
fill = "Type of Scene") +
theme(panel.background = element_blank()) +
scale_fill_manual(values = colour_bkg) +
scale_color_manual(values = colour_palette, labels=LETTERS) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))
knitr::opts_chunk$set(echo = TRUE)
runExample("11_timer")
library(shiny); runApp('C:/Users/User/Desktop/NM2207/GitHub/jyapple15.github.io/datastory.R')
runApp('C:/Users/User/Desktop/NM2207/GitHub/jyapple15.github.io/datastory.R')
runApp('C:/Users/User/Desktop/NM2207/GitHub/jyapple15.github.io/datastory.R')
runApp('C:/Users/User/Desktop/NM2207/GitHub/jyapple15.github.io/datastory.R')
runApp('C:/Users/User/Desktop/NM2207/GitHub/jyapple15.github.io/datastory.R')
# Importing Cleaned Datasets
labelled_movies <- c("Buddy","Hobbit","Machete","Mitty","Paranormal","Hunger")
#for(i in labelled_movies){assign(i,read_csv(sprintf("./src/data/cleaned/%s_cleaned.csv",i)))}
# Importing Snipped Datasets
for(i in c("ms_data","screen_times")){
assign(i,read_csv(sprintf("./src/data/cleaned/snipped_%s.csv",i)))
}
# Importing Cleaned Datasets
labelled_movies <- c("Buddy","Hobbit","Machete","Mitty","Paranormal","Hunger")
#for(i in labelled_movies){assign(i,read_csv(sprintf("./src/data/cleaned/%s_cleaned.csv",i)))}
# Importing Snipped Datasets
for(i in c("ms_data","screen_times")){
assign(i,read_csv(sprintf("./src/data/cleaned/snipped_%s.csv",i)))
}
# Labelled ms_data (Only 6 diff movies)
labelled_ms <- ms_data %>% dplyr::filter(!is.na(label))
fear_labels <- grep("death|suspense|horror|murder|aggressive|violence|shock", distinct(exp_labelled_ms,label)$label, value=TRUE)
library(shiny); runApp('C:/Users/User/Desktop/NM2207/GitHub/jyapple15.github.io/CopyOfdatastory.R')
runApp('C:/Users/User/Desktop/NM2207/GitHub/jyapple15.github.io/CopyOfdatastory.R')
runApp('C:/Users/User/Desktop/NM2207/GitHub/jyapple15.github.io/datastory.R')
runApp('C:/Users/User/Desktop/NM2207/GitHub/jyapple15.github.io/datastory.R')
runApp('C:/Users/User/Desktop/NM2207/GitHub/jyapple15.github.io/datastory.R')
# Packages
library(tidyverse)
library(ggplot2)
library(gsignal)
library(forcats)
library(htmltools)
# Importing Cleaned Datasets
labelled_movies <- c("Buddy","Hobbit","Machete","Mitty","Paranormal","Hunger")
#for(i in labelled_movies){assign(i,read_csv(sprintf("./src/data/cleaned/%s_cleaned.csv",i)))}
# Importing Snipped Datasets
for(i in c("ms_data","screen_times")){
assign(i,read_csv(sprintf("./src/data/cleaned/snipped_%s.csv",i)))
}
# Labelled ms_data (Only 6 diff movies)
labelled_ms <- ms_data %>% dplyr::filter(!is.na(label))
exp_labelled_ms <- labelled_ms %>% #To separate labels
separate_longer_delim(
cols = label,
delim = "; "
)
fear_labels <- grep("death|suspense|horror|murder|aggressive|violence|shock", distinct(exp_labelled_ms,label)$label, value=TRUE)
tidied_labelled_ms <- exp_labelled_ms %>% #To categorise fear and non-fear labels
mutate(is.fear = if_else(label %in% fear_labels, "Fear","Others")) #(TODO: SHINY SELECT WHAT's FEAR)
# Unlabelled ms_data (Excluding the buffer time before labelled movies start)
unlabelled_ms <- ms_data %>%
dplyr::filter(is.na(label))
# Graph 1
# A segmented bar plot of compound concentrations against compound mass labels. Bar plots will be segmented by total % concentration under each fear label. This will allow us to observe which compounds are most commonly present when in fear. Based on the observations, a narrowed list of compounds will be analysed in the later graphs (List A)
#Chosen Colour Palette (TODO)
colour_palette <- c("#a9a9f9","#009699","red","orange","yellow","green")
colour_gradient <- c("#009699","royalblue","#a9a9f9") #Low to high conc
colour_bkg <- c("#a9a9f9","#009699") #contrasting w each other and w palette
#Scenes were double-counted if fell under both fear and non-fear scene labels
graph_1 <- tidied_labelled_ms %>% #To introduce %
group_by(cmpd) %>%
mutate(Tconc = sum(conc)) %>%
group_by(cmpd,is.fear) %>%
mutate(fraction = sum(conc)/Tconc) %>%
distinct(cmpd,is.fear,fraction) %>%
arrange(is.fear, desc(fraction))
#For later stuff
fear_cmpd_ranked <- graph_1$cmpd[1:(length(graph_1$cmpd)/2)]
#For user input in shiny (TODO)
user_start_rank_1 <- 1
user_end_rank_1 <- 25
select_to_plot_1 <- graph_1[c(user_start_rank_1:user_end_rank_1, (length(graph_1$cmpd)-user_start_rank_1+1):(length(graph_1$cmpd)-user_end_rank_1+1)),]
select_to_plot_1 %>%
group_by(is.fear) %>%
mutate(cmpd = fct_reorder(as.character(cmpd), fraction)) %>%
ggplot(aes(y = cmpd, x = fraction, fill = fct_reorder(is.fear, -fraction))) +
geom_col() +
labs(title = paste("Top",user_start_rank_1,"to",user_end_rank_1,"Most Frequently Emitted Compounds when in Fear"),
subtitle = "Identified by distribution across different types of scenes",
y = "m/z of Compound",
x = "Fraction of the Total Concentration",
fill = "Type of Scene") +
scale_fill_manual(values=colour_palette) +
theme(panel.background = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_text(margin = margin(r = 10)),
axis.title.x = element_text(margin = margin(t = 10)),
plot.subtitle = element_text(margin = margin(b = 10))
) +
scale_x_continuous(expand = c(0, 0))
#scale_fill_manual(values=c("red","blue")
#scale_x_discrete(guide=guide_axis(angle=90))
#scale_fill_brewer(palette="Set3")
select_to_plot_1 <- graph_1[c(user_start_rank_1:user_end_rank_1, (length(graph_1$cmpd)-user_start_rank_1+1):(length(graph_1$cmpd)-user_end_rank_1+1)),]
select_to_plot_1 %>%
group_by(is.fear) %>%
mutate(cmpd = fct_reorder(as.character(cmpd), fraction)) %>%
ggplot(aes(y = cmpd, x = fraction, fill = fct_reorder(is.fear, -fraction))) +
geom_col() +
labs(title = paste("Top",user_start_rank_1,"to",user_end_rank_1,"Most Frequently Emitted Compounds when in Fear"),
subtitle = "Identified by distribution across different types of scenes",
y = "m/z of Compound",
x = "Fraction of the Total Concentration",
fill = "Type of Scene") +
scale_fill_manual(values=colour_palette) +
theme(panel.background = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_text(margin = margin(r = 10)),
axis.title.x = element_text(margin = margin(t = 10)),
plot.subtitle = element_text(margin = margin(b = 10))
) +
scale_x_continuous(expand = c(0, 0))
distinct(graph_1() %>% filter(is.fear = "Fear"),cmpd, desc(fraction))$cmpd
distinct(graph_1 %>% filter(is.fear = "Fear"),cmpd, desc(fraction))$cmpd
distinct(graph_1 %>% dplyr::filter(is.fear = "Fear"),cmpd, desc(fraction))$cmpd
distinct(graph_1 %>% dplyr::filter(is.fear == "Fear"),cmpd, desc(fraction))$cmpd
distinct(graph_1 %>% dplyr::filter(is.fear == "Fear"),cmpd, desc(fraction))
graph_1 <- tidied_labelled_ms %>% #To introduce %
group_by(cmpd) %>%
mutate(Tconc = sum(conc)) %>%
group_by(cmpd,is.fear) %>%
mutate(fraction = sum(conc)/Tconc) %>%
distinct(cmpd,is.fear,fraction) %>%
arrange(is.fear, desc(fraction))
distinct(graph_1 %>% dplyr::filter(is.fear == "Fear"),cmpd, desc(fraction))
distinct(graph_1 %>% dplyr::filter(is.fear == "Fear"),cmpd, fraction)
distinct(graph_1 %>% dplyr::filter(is.fear == "Fear"),cmpd)
runApp('C:/Users/User/Desktop/NM2207/GitHub/jyapple15.github.io/datastory.R')
runApp('C:/Users/User/Desktop/NM2207/GitHub/jyapple15.github.io/datastory.R')
library(shiny); runApp('C:/Users/User/Desktop/NM2207/GitHub/jyapple15.github.io/datastory.R')
graph_3t %>% arrange(is.fear)
# Packages
library(tidyverse)
library(ggplot2)
library(gsignal)
library(forcats)
library(htmltools)
# Importing Cleaned Datasets
labelled_movies <- c("Buddy","Hobbit","Machete","Mitty","Paranormal","Hunger")
#for(i in labelled_movies){assign(i,read_csv(sprintf("./src/data/cleaned/%s_cleaned.csv",i)))}
# Importing Snipped Datasets
for(i in c("ms_data","screen_times")){
assign(i,read_csv(sprintf("./src/data/cleaned/snipped_%s.csv",i)))
}
# Labelled ms_data (Only 6 diff movies)
labelled_ms <- ms_data %>% dplyr::filter(!is.na(label))
exp_labelled_ms <- labelled_ms %>% #To separate labels
separate_longer_delim(
cols = label,
delim = "; "
)
fear_labels <- grep("death|suspense|horror|murder|aggressive|violence|shock", distinct(exp_labelled_ms,label)$label, value=TRUE)
tidied_labelled_ms <- exp_labelled_ms %>% #To categorise fear and non-fear labels
mutate(is.fear = if_else(label %in% fear_labels, "Fear","Others")) #(TODO: SHINY SELECT WHAT's FEAR)
# Unlabelled ms_data (Excluding the buffer time before labelled movies start)
unlabelled_ms <- ms_data %>%
dplyr::filter(is.na(label))
# Graph 1
# A segmented bar plot of compound concentrations against compound mass labels. Bar plots will be segmented by total % concentration under each fear label. This will allow us to observe which compounds are most commonly present when in fear. Based on the observations, a narrowed list of compounds will be analysed in the later graphs (List A)
#Chosen Colour Palette (TODO)
colour_palette <- c("#a9a9f9","#009699","red","orange","yellow","green")
colour_gradient <- c("#009699","royalblue","#a9a9f9") #Low to high conc
colour_bkg <- c("#a9a9f9","#009699") #contrasting w each other and w palette
#Scenes were double-counted if fell under both fear and non-fear scene labels
graph_1 <- tidied_labelled_ms %>% #To introduce %
group_by(cmpd) %>%
mutate(Tconc = sum(conc)) %>%
group_by(cmpd,is.fear) %>%
mutate(fraction = sum(conc)/Tconc) %>%
distinct(cmpd,is.fear,fraction) %>%
arrange(is.fear, desc(fraction))
#For later stuff
fear_cmpd_ranked <- graph_1$cmpd[1:(length(graph_1$cmpd)/2)]
#For user input in shiny (TODO)
user_start_rank_1 <- 1
user_end_rank_1 <- 25
select_to_plot_1 <- graph_1[c(user_start_rank_1:user_end_rank_1, (length(graph_1$cmpd)-user_start_rank_1+1):(length(graph_1$cmpd)-user_end_rank_1+1)),]
select_to_plot_1 %>%
group_by(is.fear) %>%
mutate(cmpd = fct_reorder(as.character(cmpd), fraction)) %>%
ggplot(aes(y = cmpd, x = fraction, fill = fct_reorder(is.fear, -fraction))) +
geom_col() +
labs(title = paste("Top",user_start_rank_1,"to",user_end_rank_1,"Most Frequently Emitted Compounds when in Fear"),
subtitle = "Identified by distribution across different types of scenes",
y = "m/z of Compound",
x = "Fraction of the Total Concentration",
fill = "Type of Scene") +
scale_fill_manual(values=colour_palette) +
theme(panel.background = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_text(margin = margin(r = 10)),
axis.title.x = element_text(margin = margin(t = 10)),
plot.subtitle = element_text(margin = margin(b = 10))
) +
scale_x_continuous(expand = c(0, 0))
#scale_fill_manual(values=c("red","blue")
#scale_x_discrete(guide=guide_axis(angle=90))
#scale_fill_brewer(palette="Set3")
select_to_plot_1 <- graph_1[c(user_start_rank_1:user_end_rank_1, (length(graph_1$cmpd)-user_start_rank_1+1):(length(graph_1$cmpd)-user_end_rank_1+1)),]
select_to_plot_1 %>%
group_by(is.fear) %>%
mutate(cmpd = fct_reorder(as.character(cmpd), fraction)) %>%
ggplot(aes(y = cmpd, x = fraction, fill = fct_reorder(is.fear, -fraction))) +
geom_col() +
labs(title = paste("Top",user_start_rank_1,"to",user_end_rank_1,"Most Frequently Emitted Compounds when in Fear"),
subtitle = "Identified by distribution across different types of scenes",
y = "m/z of Compound",
x = "Fraction of the Total Concentration",
fill = "Type of Scene") +
scale_fill_manual(values=colour_palette) +
theme(panel.background = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_text(margin = margin(r = 10)),
axis.title.x = element_text(margin = margin(t = 10)),
plot.subtitle = element_text(margin = margin(b = 10))
) +
scale_x_continuous(expand = c(0, 0))
# Graph 2 (Changed from bar to hex)
# A bar graph displaying the total concentration of a specific chosen compound under each scene label. This will give a clearer idea of the distribution of the selected compound across different types of scenes. This will only be for compounds in List A.
#DOUBLE-COUNTING
#MORE SHINY TASKS: Add info about bin when hover over hex (TODO)
#For user input in Shiny (TODO)
user_cmpd_2 <- "60.0490"
user_cmpd_2 <- "235.1928"
#with 0 --> Highlights that be at 0 and relatively same amount of time (Due to vagueness of scene labels)
tidied_labelled_ms %>%
dplyr::filter(cmpd == user_cmpd_2) %>%
ggplot(aes(x=conc_perpax, y=label)) +
geom_hex() +
labs(title = paste("Distribution of compound with m/z =",user_cmpd_2,"across different scenes"),
subtitle = "Inclusive of data points where compound is absent",
y = "Type of Scene",
x = "Concentration per Pax per Scene") +
scale_fill_gradientn(colours = colour_gradient)
#without 0 points --> For better idea of distribution
tidied_labelled_ms %>%
dplyr::filter(cmpd == user_cmpd_2, conc>0) %>%
ggplot(aes(x=conc_perpax, y=label)) +
geom_hex() +
labs(title = paste("Distribution of compound with m/z =",user_cmpd_2,"across different scenes"),
subtitle = "Excluding data points where compound is absent",
y = "Type of Scene",
x = "Concentration per Pax perScene") +
scale_fill_gradientn(colours = colour_gradient)
zeros <- TRUE
if(zeros == TRUE){
graph_2t <- tidied_labelled_ms %>% dplyr::filter(conc > 0)
} else {
graph_2t <- tidied_labelled_ms
}
#without 0 points --> For better idea of distribution
graph_2t %>%
dplyr::filter(cmpd == user_cmpd_2) %>%
ggplot(aes(x=conc_perpax, y=label)) +
geom_hex() +
labs(title = paste("Distribution of compound with m/z =",user_cmpd_2,"across different scenes"),
subtitle = paste(if_else(zeros == FALSE, "Excludes", "Includes"), "data points where compound is absent"),
y = "Type of Scene",
x = "Concentration per Pax per Scene") +
scale_fill_gradientn(colours = colour_gradient)
# Graph 3 #REMOVE? USELESS
# Multiple box plots will be plot to display the distribution of a compound's concentration under different scene labels. This will give a clearer idea of the distribution of concentrations, instead of just the total concentration across all similar scenes.  This will only be for compounds in List A.
graph_3t <- labelled_ms %>%
dplyr::filter(movie == user_movie_3) %>%
mutate(is.fear = if_else(fear_labels %in% label, "Fear","Others"))
#For user input in Shiny (TODO)
user_movie_3 <- "Paranormal Activity: The Marked Ones"
user_top_cmpd_3 <- 1 #A range selected by user
user_bottom_cmpd_3 <- 15
user_count_cmpd_3 <- user_bottom_cmpd_3 - user_top_cmpd_3 + 1
#Vector of selected compounds
selected_cmpd_3 <- fear_cmpd_ranked[user_top_cmpd_3:user_bottom_cmpd_3]
graph_3t <- labelled_ms %>%
dplyr::filter(movie == user_movie_3) %>%
mutate(is.fear = if_else(fear_labels %in% label, "Fear","Others"))
graph_3t <- labelled_ms %>%
dplyr::filter(movie == user_movie_3) %>%
mutate(is.fear = if_else(grepl(paste(fear_labels, collapse="|"),label), "Fear","Others"))
graph_3t %>% arrange(is.fear) %>% distinct(label)
library(shiny); runApp('C:/Users/User/Desktop/NM2207/GitHub/jyapple15.github.io/datastory.R')
